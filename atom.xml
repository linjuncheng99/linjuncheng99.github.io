<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CodeLin</title>
  
  <subtitle>记录成长</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://codelin.com/"/>
  <updated>2019-08-12T11:35:37.053Z</updated>
  <id>http://codelin.com/</id>
  
  <author>
    <name>lin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring的核心</title>
    <link href="http://codelin.com/2019/08/12/Spring%E7%9A%84%E6%A0%B8%E5%BF%83/"/>
    <id>http://codelin.com/2019/08/12/Spring的核心/</id>
    <published>2019-08-12T08:24:26.000Z</published>
    <updated>2019-08-12T11:35:37.053Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=1162677372,203309198&fm=26&gp=0.jpg" alt="spring"></p><h1 id="spring的核心"><a href="#spring的核心" class="headerlink" title="spring的核心"></a>spring的核心</h1><h2 id="spring基本概念"><a href="#spring基本概念" class="headerlink" title="spring基本概念"></a>spring基本概念</h2><hr><h4 id="什么是spring框架"><a href="#什么是spring框架" class="headerlink" title="什么是spring框架"></a>什么是spring框架</h4><ul><li>Spring是一个开源框架，Spring是于2003 年兴起的一个轻量级的Java 开发框架，由Rod Johnson 在其著作Expert One-On-One J2EE Development and Design中阐述的部分理念和原型衍生而来。它是为了解决企业应用开发的复杂性而创建的。框架的主要优势之一就是其分层架构，分层架构允许使用者选择使用哪一个组件，同时为 J2EE 应用程序开发提供集成的框架。Spring使用基本的JavaBean来完成以前只可能由EJB完成的事情。然而，Spring的用途不仅限于服务器端的开发。从简单性、可测试性和松耦合的角度而言，任何Java应用都可以从Spring中受益。<font color="red">Spring的核心是控制反转（IoC）和面向切面（AOP）。</font><br>简单来说，Spring是一个分层的JavaSE/EE full-stack(一站式) 轻量级开源框架。</li></ul><hr><h4 id="spring的体系结构"><a href="#spring的体系结构" class="headerlink" title="spring的体系结构"></a>spring的体系结构</h4><ul><li><p>spring框架是一个分层架构，包含一系列的功能要素，被分为大约20个模块。这些模块分为<font color="green">Core Container，Data Access/Integration,Web,AOP,测试部分</font></p></li><li><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1565609755325&di=76f600939d873acb28d6105503c508d7&imgtype=0&src=http%3A%2F%2Fimg.mp.itc.cn%2Fupload%2F20170126%2Fd4968fc8035d465a9ccf69a79ce4d022_th.jpeg" alt="spring体系结构"></p></li></ul><hr><ul><li>让我们逐一浏览spring模块</li></ul><h5 id="spring核心容器—管理着bean的创建，配置和管理"><a href="#spring核心容器—管理着bean的创建，配置和管理" class="headerlink" title="spring核心容器—管理着bean的创建，配置和管理"></a>spring核心容器—管理着bean的创建，配置和管理</h5><ul><li><p>bean 工厂：为spring提供DI的功能</p></li><li><p>应用上下文：提供了配置spring的方式</p></li></ul><h5 id="spring的AOP模块—面向切面编程"><a href="#spring的AOP模块—面向切面编程" class="headerlink" title="spring的AOP模块—面向切面编程"></a>spring的AOP模块—面向切面编程</h5><ul><li>AOP：帮助应用对象解耦</li></ul><h5 id="数据访问与集成"><a href="#数据访问与集成" class="headerlink" title="数据访问与集成"></a>数据访问与集成</h5><ul><li><p>JDBC：抽象了板式代码，使数据库代码变得简洁明了</p></li><li><p>ORM：对许多流行的ORM框架进行了集成，例如Hibernate。spring的事务管理支持所有的ORM框架以及JDBC</p></li><li><p>JMS：使用消息以异步的方式与其他应用集成，从spring3.0开始，本模块还包含对象到XML映射的特性</p></li></ul><h5 id="Web与远程调用—MVC（Model-View-Controller）"><a href="#Web与远程调用—MVC（Model-View-Controller）" class="headerlink" title="Web与远程调用—MVC（Model-View-Controller）"></a>Web与远程调用—MVC（Model-View-Controller）</h5><h5 id="Instrumentation"><a href="#Instrumentation" class="headerlink" title="Instrumentation"></a>Instrumentation</h5><ul><li>提供了为JVM添加代理的功能。具体来讲，为Tomcat提供了一个植入代理，能够为Tomcat传递类文件，就像这些文件是被类加载器加载的一样</li></ul><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><ul><li>为使用JNDI，Servlet和Portlet编写单元提供了一些列的mock对象实现</li></ul><hr><h2 id="装配Bean"><a href="#装配Bean" class="headerlink" title="装配Bean"></a>装配Bean</h2><ul><li>在XML中进行显示配置</li><li>在java中进行显示配置</li><li>隐式的bean发现机制和自动装配</li></ul><hr><h3 id="自动化装配bean：组件扫描和自动装配"><a href="#自动化装配bean：组件扫描和自动装配" class="headerlink" title="自动化装配bean：组件扫描和自动装配"></a>自动化装配bean：组件扫描和自动装配</h3><h4 id="1-创建可被发现的bean"><a href="#1-创建可被发现的bean" class="headerlink" title="1.创建可被发现的bean"></a>1.创建可被发现的bean</h4><ul><li><p>1.1 CompactDisc接口定义了CD的概念</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ljc.soundsystem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CompactDisc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>1.2 带有@Component注解的CompactDisc实现类SgtPeppers</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ljc.soundsystem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SgtPeppers</span> <span class="keyword">implements</span> <span class="title">CompactDisc</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title=<span class="string">"Sgt.Pepeers's Lonely Hearts Club Band"</span>;</span><br><span class="line">    <span class="keyword">private</span> String artist=<span class="string">"The Beatles"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Playing"</span>+title+<span class="string">"by"</span>+artist);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@Compoment注解：表明该类会作为组件类，并告知spring要为这个类创建bean</p></li><li><p>1.3  @ComponentScan注解启用了组件扫描—组件扫描默认是不开启的，需要显示配置一下spring，从而命令它去寻找带有@Component注解的类，并为其创建bean</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ljc.soundsystem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="2-为组件扫描的bean命名"><a href="#2-为组件扫描的bean命名" class="headerlink" title="2. 为组件扫描的bean命名"></a>2. 为组件扫描的bean命名</h4><ul><li><p>2.1&nbsp;&nbsp;spring给所有的bean都有一个ID。在前面的例子中，我们没有为SgtPeppersbean设置ID，但spring会根据类名为其指定一个ID，为sgtPeppers，也就是类名的第一个字母变为小写</p></li><li><p>2.2&nbsp;&nbsp;方法1：将期望的ID值传递给@Component注解。例如想让这个标识为lin，只需要像下面配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"lin"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SgtPeppers</span> <span class="keyword">implements</span> <span class="title">CompactDisc</span> </span>&#123;</span><br><span class="line">    ...&#125;</span><br></pre></td></tr></table></figure></li><li><p>2.3&nbsp;&nbsp;方法2：不适用@Component注解，而是使用java依赖注入规范中的@Named注解为bean设置ID</p></li></ul><h4 id="3-通过为bean添加注解实现自动装配"><a href="#3-通过为bean添加注解实现自动装配" class="headerlink" title="3.通过为bean添加注解实现自动装配"></a>3.通过为bean添加注解实现自动装配</h4><ul><li><p>3.1&nbsp;&nbsp;通过自动装配，将一个CompactDisc注入到CDPlayer之中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ljc.soundsystem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CompactDisc cd;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CDPlayerConfig</span><span class="params">(CompactDisc cd)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cd=cd;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cd.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>3.2&nbsp;&nbsp;构造器上加了@Autowired注解，表明当spring创建CDPlayerConfigbean时，会通过这个构造器来进行实例化并传入一个可以设置给CompactDisc类型的bean。@Autowired不仅适用构造器，也适用其他方法</p></li><li><p>3.3&nbsp;&nbsp;如果没有匹配的bean，spring会抛出一个异常。为了避免异常，可以将@Autowired的required属性设为false：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CDPlayerConfig</span><span class="params">(CompactDisc cd)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cd=cd;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><p>-3.4&nbsp;&nbsp;可以用@Inject替换@Autowired，spring可以同时支持两种</p><hr><h3 id="通过java代码装配bean"><a href="#通过java代码装配bean" class="headerlink" title="通过java代码装配bean"></a>通过java代码装配bean</h3><h4 id="1-创建配置类"><a href="#1-创建配置类" class="headerlink" title="1.创建配置类"></a>1.创建配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ljc.soundsystem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@Configuration注解表明这个类是一个配置类，该类包含在spring应用上下文如何创建bean的细节</li></ul><h4 id="2-声明简单的bean"><a href="#2-声明简单的bean" class="headerlink" title="2.声明简单的bean"></a>2.声明简单的bean</h4><p>-2.1&nbsp;在javaConfig中声明bean，需要编写一个方法，这个方法负责创建所需类型的实例，然后给这个方法添加@Bean注解。例如，下面的代码声明了CompactDisc bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> CompactDisc <span class="title">sgtPeppers</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> SgtPeppers();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>-2.2&nbsp;@Bean注解会告诉spring这个方法会返回一个对象，该对象要注册为spring上下文中的bean。默认下，bean的ID与带有@Bean注解的方法一样，本例中，bean的ID为sgtPeppers。</p><h4 id="3-借助javaConfig实现注入"><a href="#3-借助javaConfig实现注入" class="headerlink" title="3.借助javaConfig实现注入"></a>3.借助javaConfig实现注入</h4><hr><h3 id="通过XML装配bean"><a href="#通过XML装配bean" class="headerlink" title="通过XML装配bean"></a>通过XML装配bean</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=1162677372,203309198&amp;fm=26&amp;gp=0.jpg&quot; alt=&quot;spring&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;spring
      
    
    </summary>
    
      <category term="spring" scheme="http://codelin.com/categories/spring/"/>
    
    
      <category term="spring" scheme="http://codelin.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>java学习路线</title>
    <link href="http://codelin.com/2019/08/11/java%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    <id>http://codelin.com/2019/08/11/java学习路线/</id>
    <published>2019-08-11T07:44:43.000Z</published>
    <updated>2019-08-12T06:52:21.669Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java的学习路线"><a href="#java的学习路线" class="headerlink" title="java的学习路线"></a>java的学习路线</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><a id="more"></a><ul><li>编程语言：java</li><li>基本算法</li><li>基本网络知识：TCP/IP HTTP/HTTPs</li><li>基本的设计模式</li></ul><hr><h2 id="工具方面"><a href="#工具方面" class="headerlink" title="工具方面"></a>工具方面</h2><ul><li>操作系统：Linux</li><li>代码管理：SVN/git</li><li>持续集成（CI/CD）：jenkins</li><li>java项目管理工具：maven</li></ul><hr><h2 id="框架方面"><a href="#框架方面" class="headerlink" title="框架方面"></a>框架方面</h2><h4 id="应用层框架"><a href="#应用层框架" class="headerlink" title="应用层框架"></a>应用层框架</h4><ul><li>ssh：spring+structs+hibernate</li><li>ssm：spring+springMVC+mybatis</li><li>springboot</li></ul><h4 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h4><ul><li>MQ 消息队列</li><li>RPC 通信框架</li><li>elasticserach 搜索引擎</li></ul><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><ul><li>SQL：MYSQL/oracle</li><li>NOSQL： Redis mongodb</li></ul><hr><h2 id="架构方面"><a href="#架构方面" class="headerlink" title="架构方面"></a>架构方面</h2><h4 id="分布式-微服务"><a href="#分布式-微服务" class="headerlink" title="分布式/微服务"></a>分布式/微服务</h4><ul><li>springcloud</li><li>dubbo</li></ul><h4 id="虚拟化-容器化技术"><a href="#虚拟化-容器化技术" class="headerlink" title="虚拟化/容器化技术"></a>虚拟化/容器化技术</h4><ul><li>Docker 容器</li><li>K8S kubernetes</li></ul><hr><h2 id="关注源码-性能"><a href="#关注源码-性能" class="headerlink" title="关注源码/性能"></a>关注源码/性能</h2><ul><li>JDK 源码以及设计思想</li><li>spring 源码</li><li>JVM 细节</li><li>高并发/高可用</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;java的学习路线&quot;&gt;&lt;a href=&quot;#java的学习路线&quot; class=&quot;headerlink&quot; title=&quot;java的学习路线&quot;&gt;&lt;/a&gt;java的学习路线&lt;/h1&gt;&lt;h2 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h2&gt;
    
    </summary>
    
      <category term="java" scheme="http://codelin.com/categories/java/"/>
    
    
      <category term="java" scheme="http://codelin.com/tags/java/"/>
    
  </entry>
  
</feed>
