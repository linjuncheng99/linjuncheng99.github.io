<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CodeLin</title>
  
  <subtitle>身体和灵魂总有一个在路上</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://codelin.com/"/>
  <updated>2019-08-18T12:20:27.263Z</updated>
  <id>http://codelin.com/</id>
  
  <author>
    <name>lin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>springMVC的高级技术</title>
    <link href="http://codelin.com/2019/08/18/springMVC%E7%9A%84%E9%AB%98%E7%BA%A7%E6%8A%80%E6%9C%AF/"/>
    <id>http://codelin.com/2019/08/18/springMVC的高级技术/</id>
    <published>2019-08-18T12:20:27.000Z</published>
    <updated>2019-08-18T12:20:27.263Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>渲染Web视图</title>
    <link href="http://codelin.com/2019/08/18/%E6%B8%B2%E6%9F%93Web%E8%A7%86%E5%9B%BE/"/>
    <id>http://codelin.com/2019/08/18/渲染Web视图/</id>
    <published>2019-08-17T23:08:17.000Z</published>
    <updated>2019-08-17T23:43:09.427Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本章主要内容：</p><ul><li><p>将数据模型渲染为HTML</p></li><li><p>使用JSP视图</p></li></ul><a id="more"></a><h2 id="理解视图解析"><a href="#理解视图解析" class="headerlink" title="理解视图解析"></a>理解视图解析</h2><ul><li>将控制器中请求处理的逻辑和视图中的渲染实现解耦是Spring MVC 的一个重要特性。如果控制器中的方法直接负责产生HTML的话，就很难在不影响请求处理逻辑的前提下，维护和更新视图。控制器方法和视图的实现会在模型内容上达成一致，这是两者的最大关联，除此之外，两者应该保持足够的距离。但是，如果控制器只通过逻辑视图来了解视图的话，那Spring该如何确定使用哪一个视图实现来渲染模型呢？这就是Spring视图解析器的任务了</li></ul><p>Spring MVC 定义了一个名为ViewResolver的接口，它大致如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ViewResolver</span> </span>&#123;</span><br><span class="line">    <span class="function">View <span class="title">resolveViewName</span><span class="params">(String var1, Locale var2)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当给resolveViewName()方法传入一个视图名和Locale对象时，它会返回一个View实例。View是另外一个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    String RESPONSE_STATUS_ATTRIBUTE = View.class.getName() + <span class="string">".responseStatus"</span>;</span><br><span class="line">    String PATH_VARIABLES = View.class.getName() + <span class="string">".pathVariables"</span>;</span><br><span class="line">    String SELECTED_CONTENT_TYPE = View.class.getName() + <span class="string">".selectedContentType"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getContentType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">render</span><span class="params">(Map&lt;String, ?&gt; model, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>View接口的任务就是接受模型以及Servlet的request和response对象，并将输出结果渲染到response中</p><h2 id="创建JSP视图"><a href="#创建JSP视图" class="headerlink" title="创建JSP视图"></a>创建JSP视图</h2><p>Spring提供了两种支持JSP视图的方式：</p></li><li><p>InternalResourceViewResolver会将视图名解析为JSP文件。另外，如果在JSP页面中使用了JSP标准签库（JavaServer Pages Standard Tag library，JSTL）的话，InternalResourceViewResolver能够将视图名解析为JstlView形式的JSP文件，从而将JSTL本地化和资源bundle变量暴露给JSTL的格式化(formatting)和信息(message)标签</p></li><li><p>•Spring提供了连个JSP标签库，一个用于表单到模型的绑定，另一个提供了通用的工具类特性</p><h3 id="1-配置使用于JSP的视图解析器"><a href="#1-配置使用于JSP的视图解析器" class="headerlink" title="1.配置使用于JSP的视图解析器"></a>1.配置使用于JSP的视图解析器</h3></li><li><p>有一些视图解析器，如ResourceBundleViewResolver会直接将逻辑视图名称映射为特定的View接口实现，而InternalResourceViewResolver所采取的方式并不那么直接。它遵循一种约定，会在视图名称上添加前缀和后缀，进而确定一个Web应用中视图资源的物理路径。</p><h4 id="1-1-java配置"><a href="#1-1-java配置" class="headerlink" title="1.1 java配置"></a>1.1 java配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置JSP视图解析器</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ViewResolver <span class="title">viewResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">       InternalResourceViewResolver resolver=<span class="keyword">new</span> InternalResourceViewResolver();</span><br><span class="line">       resolver.setPrefix(<span class="string">"/WEB-INF/views/"</span>);</span><br><span class="line">       resolver.setSuffix(<span class="string">".jsp"</span>);</span><br><span class="line">       resolver.setExposeContextBeansAsAttributes(<span class="keyword">true</span>);</span><br><span class="line">       <span class="keyword">return</span> resolver;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="1-2-使用XML的Spring配置："><a href="#1-2-使用XML的Spring配置：" class="headerlink" title="1.2 使用XML的Spring配置："></a>1.2 使用XML的Spring配置：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> </span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span> </span></span><br><span class="line"><span class="tag">          <span class="attr">p:prefix</span>=<span class="string">"/WEB-INF/views/"</span> </span></span><br><span class="line"><span class="tag">          <span class="attr">p:suffix</span>=<span class="string">".jsp"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>InternalResourceViewResolver配置就绪后，它就会将逻辑视图名解析为JSP文件，如下所示：</p><ul><li><p>home将会解析为”/WEB-INF/views/home.jsp”</p></li><li><p>productList将会解析为”/WEB-INF/views/productList.jsp”</p></li></ul><h3 id="2-使用Spring的JSP库"><a href="#2-使用Spring的JSP库" class="headerlink" title="2. 使用Spring的JSP库"></a>2. 使用Spring的JSP库</h3><h4 id="2-1-将表单绑定到模型上"><a href="#2-1-将表单绑定到模型上" class="headerlink" title="2.1 将表单绑定到模型上"></a>2.1 将表单绑定到模型上</h4><ul><li><p>Spring中的表单绑定JSP标签库包含了14个标签，它们中的大多数都是用来渲染HTML中的表单标签。但是，它们与原生HTML表单标签的区别在于它们会绑定模型中的一个对象，能够根据模型中对象的属性填充值。标签库还包含了一个为用户展示错误的标签，它会将错误信息渲染到最终的HTML上。 </p><p>为了使用表单绑定标签，需要在JSP页面中对其进行声明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"sf"</span> uri=<span class="string">"http://www.springframework.org/tags/form"</span> %&gt;</span><br></pre></td></tr></table></figure></li></ul><p>在注册JSP中使用这些标签后，代码如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;sf:form method=<span class="string">"post"</span> commandName=<span class="string">"spitter"</span>&gt;</span><br><span class="line">    First Name: &lt;sf:input path=<span class="string">"firstName"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    Last Name: &lt;sf:input path=<span class="string">"lastName"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    Username: &lt;sf:input path=<span class="string">"username"</span>/&gt;</span><br><span class="line">    Password: &lt;sf:input path=<span class="string">"password"</span>/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"Register"</span>/&gt;</span><br><span class="line">&lt;/sf:form&gt;</span><br></pre></td></tr></table></figure><ul><li><a href="sf:form" target="_blank" rel="noopener">sf:form</a>会渲染一个HTML的form标签，但它也会通过commandName属性构建针对某个模型对象的上下文信息。在其他的表单绑定标签中，会引用这个模型对象的属性。<br>需要注意的是，我们将commandName属性设置为spitter，因此，在模型中必须有一个key为spitter的对象，否则的话，表单不能正常渲染（会出现JSP错误）。这意味着我们需要修改一下SpitterController，以确保模型中存在spitter为key的Spitter对象：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/register"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">showRegistrationrForm</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    model.addAttribute(<span class="keyword">new</span> Spitter());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"registerForm"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>回到这个表单，前三个输入域将HTMLinput标签改成了sf:input。这个标签会渲染成一个HTMLinput标签，其中type属性设置为”text”。我们在这里设置了path属性，input标签的value属性值将会设置为模型对象中path属性所对应的值。对于password输入域，我们使用sf:password来代替sf:input。sf:password与sf:input类似，但是它所渲染的HTML的input标签中，会将type属性设置为password，这样当输入的时候，它的值不会明文显示。 </li></ul><h4 id="2-2-展现错误"><a href="#2-2-展现错误" class="headerlink" title="2.2 展现错误"></a>2.2 展现错误</h4><ul><li>如果存在校验错误的话，请求中会包含错误的详细信息，这些信息是与模型数据放到一起的。我们所需要做的就是到模型中将这些数据抽取出来，并展现给用户。sf:errors能够让这项任务变得简单：</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;sf:form method=<span class="string">"post"</span> commandName=<span class="string">"spitter"</span>&gt;</span><br><span class="line">    First Name: &lt;sf:input path=<span class="string">"firstName"</span>/&gt;</span><br><span class="line">    &lt;sf:errors path=<span class="string">"firstName"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    Last Name: &lt;sf:input path=<span class="string">"lastName"</span>/&gt;</span><br><span class="line">    &lt;sf:errors path=<span class="string">"lastName"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    Username: &lt;sf:input path=<span class="string">"username"</span>/&gt;</span><br><span class="line">    &lt;sf:errors path=<span class="string">"username"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    Password: &lt;sf:password path=<span class="string">"password"</span>/&gt;</span><br><span class="line">    &lt;sf:errors path=<span class="string">"password"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"Register"</span>/&gt;</span><br><span class="line">&lt;/sf:form&gt;</span><br></pre></td></tr></table></figure><p> 在这里sf:errors的path属性设置成其对应需要展示的sf:input的path属性值，也就指定了要显示Spitter模型对象中哪个属性的错误信息。如果绑定的属性没有任何错误的话，那么sf:errors不会渲染任何东西。<br>现在，我们已经可以为用户展现错误信息了，这样他们就能够修正这些错误了。我们还可以更进一步，修改错误的样式，使其更加突出显示。为了做到这一点，可以设置其cssClass属性：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;sf:form method=<span class="string">"post"</span> commandName=<span class="string">"spitter"</span>&gt;</span><br><span class="line">    First Name: &lt;sf:input path=<span class="string">"firstName"</span>/&gt;</span><br><span class="line">    &lt;sf:errors path=<span class="string">"firstName"</span> cssClass=<span class="string">"error"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    Last Name: &lt;sf:input path=<span class="string">"lastName"</span>/&gt;</span><br><span class="line">    &lt;sf:errors path=<span class="string">"lastName"</span> cssClass=<span class="string">"error"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    Username: &lt;sf:input path=<span class="string">"username"</span>/&gt;</span><br><span class="line">    &lt;sf:errors path=<span class="string">"username"</span> cssClass=<span class="string">"error"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    Password: &lt;sf:password path=<span class="string">"password"</span>/&gt;</span><br><span class="line">    &lt;sf:errors path=<span class="string">"password"</span> cssClass=<span class="string">"error"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"Register"</span>/&gt;</span><br><span class="line">&lt;/sf:form&gt;</span><br></pre></td></tr></table></figure><h4 id="2-3-创建URL"><a href="#2-3-创建URL" class="headerlink" title="2.3 创建URL"></a>2.3 创建URL</h4><ul><li><p>s:url标签的主要任务是创建URL，然后将其赋值给一个变量或者渲染到响应中。它是JSTL中c:url标签的替代者，但是它有自己的特殊技巧。<br>按照其最简单的形式s:url会接受一个相当于Servlet上线文的URL，并在渲染的时候预先添加上Servlet上下文路径。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;s:url value="</span>/<span class="attr">spitter</span>/<span class="attr">register</span>"/&gt;</span>"&gt;Register<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>另外，还可以使用s:url创建URL，并将其赋值给一个变量供模板在稍后使用：</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">s:url</span> <span class="attr">value</span>=<span class="string">"/spitter/register"</span> <span class="attr">var</span>=<span class="string">"registerUrl"</span>&gt;</span><span class="tag">&lt;/<span class="name">s:url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;registerUrl&#125;"</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>默认情况下，URL是在页面作用域内创建的。但是通过设置scope属性，我们可以让s:url在应用作用域内、会话作用域内或请求作用域内创建URL：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">s:url</span> <span class="attr">value</span>=<span class="string">"/spitter/register"</span> <span class="attr">var</span>=<span class="string">"registerUrl"</span> <span class="attr">scope</span>=<span class="string">"request"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>如果希望在URL上添加参数的话，那么你可以使用s:param标签:<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">s:url</span> <span class="attr">value</span>=<span class="string">"/spitter/register"</span> <span class="attr">var</span>=<span class="string">"registerUrl"</span> <span class="attr">scope</span>=<span class="string">"request"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s:param</span> <span class="attr">name</span>=<span class="string">"max"</span> <span class="attr">value</span>=<span class="string">"60"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s:param</span> <span class="attr">name</span>=<span class="string">"count"</span> <span class="attr">value</span>=<span class="string">"20"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:url</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本章主要内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;将数据模型渲染为HTML&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用JSP视图&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="springMVC" scheme="http://codelin.com/categories/springMVC/"/>
    
    
      <category term="spring" scheme="http://codelin.com/tags/spring/"/>
    
      <category term="springMVC" scheme="http://codelin.com/tags/springMVC/"/>
    
  </entry>
  
  <entry>
    <title>构建Spring Web应用程序</title>
    <link href="http://codelin.com/2019/08/17/Web%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/"/>
    <id>http://codelin.com/2019/08/17/Web应用程序/</id>
    <published>2019-08-17T04:47:03.000Z</published>
    <updated>2019-08-17T08:22:35.156Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>spring MVC基于模型-控制器-视图（Model-Controller-View，MVC）模式实现，它能帮助你构建像spring框架的灵活和松耦合的Web应用程序。</li></ul><a id="more"></a><h2 id="spring-MVC起步"><a href="#spring-MVC起步" class="headerlink" title="spring MVC起步"></a>spring MVC起步</h2><ul><li>Spring MVC属于SpringFrameWork的后续产品，已经融合在Spring Web Flow里面。Spring 框架提供了构建 Web 应用程序的全功能 MVC 模块。使用 Spring 可插入的 MVC 架构，从而在使用Spring进行WEB开发时，可以选择使用Spring的Spring MVC框架</li></ul><h3 id="1-跟踪spring-MVC的请求"><a href="#1-跟踪spring-MVC的请求" class="headerlink" title="1. 跟踪spring MVC的请求"></a>1. 跟踪spring MVC的请求</h3><p><img src="https://images2015.cnblogs.com/blog/791227/201611/791227-20161125140338768-995727439.png" alt="流程图"></p><ul><li><p>具体步骤：</p></li><li><ol><li>第一步：发起请求到前端控制器(DispatcherServlet)。DispatcherServlet的任务是将请求发送给spring MVC控制器（controller），控制器是一个用于处理请求的spring组件。</li></ol></li><li><ol start="2"><li>第二步：前端控制器请求HandlerMapping查找 Handler （可以根据xml配置、注解进行查找）。应用程序中可能有多个控制器，DispatcherServlet需要知道应该将请求发送到哪个控制器，所以DispatcherServlet会查询一个或者多个处理器映射（hander mapping）来确定发送到哪一个控制器。</li></ol></li><li><ol start="3"><li>第三步：处理器映射器HandlerMapping向前端控制器返回Handler，HandlerMapping会把请求映射为HandlerExecutionChain对象（包含一个Handler处理器（页面控制器）对象，多个HandlerInterceptor拦截器对象），通过这种策略模式，很容易添加新的映射策略</li></ol></li><li><ol start="4"><li>第四步：前端控制器调用处理器适配器去执行Handler</li></ol></li><li><ol start="5"><li>第五步：处理器适配器HandlerAdapter将会根据适配的结果去执行Handler</li></ol></li><li><ol start="6"><li>第六步：Handler执行完成给适配器返回ModelAndView</li></ol></li><li><ol start="7"><li>第七步：处理器适配器向前端控制器返回ModelAndView （ModelAndView是springmvc框架的一个底层对象，包括 Model和view）</li></ol></li><li><ol start="8"><li>第八步：前端控制器请求视图解析器去进行视图解析 （根据逻辑视图名解析成真正的视图(jsp)），通过这种策略很容易更换其他视图技术，只需要更改视图解析器即可</li></ol></li><li><ol start="9"><li>第九步：视图解析器向前端控制器返回View</li></ol></li><li><ol start="10"><li>第十步：前端控制器进行视图渲染 （视图渲染将模型数据(在ModelAndView对象中)填充到request域）</li></ol></li><li><ol start="11"><li>第十一步：前端控制器向用户响应结果</li></ol></li></ul><h3 id="2-搭建spring-MVC"><a href="#2-搭建spring-MVC" class="headerlink" title="2.搭建spring MVC"></a>2.搭建spring MVC</h3><h4 id="2-1-配置DispatcherServlet"><a href="#2-1-配置DispatcherServlet" class="headerlink" title="2.1 配置DispatcherServlet"></a>2.1 配置DispatcherServlet</h4><ul><li>传统的方式是会配置在web.xml文件中，这个文件会放到应用的WAR包里面，但在这里使用java将DispatcherServlet配置在Servlet容器中，而不再使用xml文件：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> web.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpittrWebAppInitializer</span> <span class="keyword">extends</span> <span class="title">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定配置类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将DispatcherServlet映射到“/”</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-2-启用springMVC"><a href="#2-2-启用springMVC" class="headerlink" title="2.2 启用springMVC"></a>2.2 启用springMVC</h4><ul><li>我们能创建一个简单的带有@EnableWebmvc注解的类：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> web.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>这个类可以运行起来，也可以启用springMVC，但它还存在很多问题</p><ul><li><ol><li>没有配置视图解析器。如果这样，spring会默认使用BeanNameView-Resolver，这个试图解析器会查找ID与视图名称匹配的bean，并且查找的bean要实现View接口</li></ol></li><li><ol start="2"><li>没有启用组件扫描。这样的结果就是，spring只能找到显试声明在配置类的控制器</li></ol></li><li><ol start="3"><li>DispatcherServlet会映射为应用默认的Servlet，所以它会处理所有的请求，包括对静态资源的访问，达不到想要的效果</li></ol></li><li><p>因此我们需要在WebConfig这个最小配置类中再加一些东西：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> web.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ViewResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.view.InternalResourceViewResolver;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span>       <span class="comment">//启用spring MVC </span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"web.config"</span>)   <span class="comment">//启用组件扫描</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">//配置JSP视图解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ViewResolver <span class="title">viewResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        InternalResourceViewResolver resolver=<span class="keyword">new</span> InternalResourceViewResolver();</span><br><span class="line">        resolver.setPrefix(<span class="string">"/WEB-INF/views/"</span>);</span><br><span class="line">        resolver.setSuffix(<span class="string">".jsp"</span>);</span><br><span class="line">        resolver.setExposeContextBeansAsAttributes(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> resolver;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//配置静态资源的处理</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span></span>&#123;</span><br><span class="line">        configurer.enable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spittr应用介绍"><a href="#Spittr应用介绍" class="headerlink" title="Spittr应用介绍"></a>Spittr应用介绍</h3><ul><li>Spittr应用有两个基本的领域概念：Spitter(应用的用户)和Spittle(用户发布的简短状态更新)。当我们在书中完善Spittr应用的功能时，将会介绍这两个概念。在本章中，我们会构建应用的Web层，创建展现Spittle的控制器以及处理用户注册为Spitter的表单。</li></ul><h2 id="编写基本的控制器"><a href="#编写基本的控制器" class="headerlink" title="编写基本的控制器"></a>编写基本的控制器</h2><ul><li>在spring MVC中，控制器只是在方法上添加了@RequestMapping注解，下面写一个超级简单的控制器类HomeController：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> web.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>     <span class="comment">//声明一个控制器类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//处理对“/”的get的请求</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">home</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"homg"</span>;       <span class="comment">//视图名为home</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>home()方法带有 @RequestMapping注解，vaule属性指定了所要处理的路径，method属性细化了所要处理的HTTP方法，它返回了一个String类型的home，这个home被spring MVC解析为要渲染的视图名称，DispatcherServlet会要求视图解析器将这个逻辑名称渲染为实际的视图，在这里视图会被解析为“WEB-INF/views/home.jsp”路径的JSP：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Spittr&lt;/title&gt;</span><br><span class="line">    &lt;link rel=<span class="string">"stylesheet"</span></span><br><span class="line">          type=<span class="string">"text/css"</span></span><br><span class="line">          href=<span class="string">"&lt;c:url value="</span>/resources/style.css<span class="string">"/&gt;"</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;h1&gt;Welcome to Spitrr&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">  &lt;a href="&lt;c:url value="/spittles"/&gt;"&gt;Spittles&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="1-测试控制器"><a href="#1-测试控制器" class="headerlink" title="1. 测试控制器"></a>1. 测试控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> web.config;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.setup.MockMvcBuilders.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeControllerTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHomePage</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//搭建MockMve</span></span><br><span class="line">        HomeController controller=<span class="keyword">new</span> HomeController();</span><br><span class="line">        MockMvc mockMvc=standaloneSetup(controller).build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对“/”执行GET请求</span></span><br><span class="line">        mockMvc.perform(get(<span class="string">"/"</span>)).andExpect(view().name(<span class="string">"home"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-传递模型数据到视图中"><a href="#2-传递模型数据到视图中" class="headerlink" title="2. 传递模型数据到视图中"></a>2. 传递模型数据到视图中</h3><ul><li>需要定义一个数据访问的Repository，为了实现解耦以及数据库访问的细节中，将其定义为一个接口，如下的SpittleRepository：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> web.data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> web.Spittle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpittleRepository</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Spittle&gt; <span class="title">findSpittle</span><span class="params">(<span class="keyword">long</span> max, <span class="keyword">int</span> count)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>如果要获取最近的20个Spittle对象，那么只需调用这样调用：<br>List<spittle> recent = spittleRepository.findSpittles(Long.MAX_VALUE, 20);</spittle></p><ul><li>下面对Spittle进行定义：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.builder.EqualsBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.builder.HashCodeBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Spittle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String message;<span class="comment">// 消息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Date time;<span class="comment">// 时间戳</span></span><br><span class="line">    <span class="keyword">private</span> Double latitude;</span><br><span class="line">    <span class="keyword">private</span> Double longitude;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Spittle</span><span class="params">(String message, Date time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(message, time, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Spittle</span><span class="params">(String message, Date time, Double latitude, Double longitude)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">        <span class="keyword">this</span>.time = time;</span><br><span class="line">        <span class="keyword">this</span>.latitude = latitude;</span><br><span class="line">        <span class="keyword">this</span>.longitude = longitude;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object that)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> EqualsBuilder.reflectionEquals(<span class="keyword">this</span>, that, <span class="string">"id"</span>, <span class="string">"time"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HashCodeBuilder.reflectionHashCode(<span class="keyword">this</span>, <span class="string">"id"</span>, <span class="string">"time"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//getters and setters</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="接受请求的输入"><a href="#接受请求的输入" class="headerlink" title="接受请求的输入"></a>接受请求的输入</h2><p>Spring MVC提供了如下方式供客户端传递数据到控制器处理方法：</p><ul><li>查询参数：Query parameters</li><li>表单参数: Form parameters</li><li>路径变量：Path variables</li></ul><h3 id="1-处理查询参数"><a href="#1-处理查询参数" class="headerlink" title="1. 处理查询参数"></a>1. 处理查询参数</h3><p>Spittr应用的一个需求就是要对spittle列表分页展示，但是SpittleController仅仅展示最近的spittle。如果要让用户可以每次得到一页的spittle记录，那么就需要让用户可以通过某种方式将他们想看的spittle记录的参数传递到后台。</p><p>在浏览spittle时，如果想要查看下一页的spittle，那么就需要传递比当前页的最后一个spittle的id小一位的id，也可以传递想要展示的spittle的数量。</p><p>为了实现分页，需要编写一个控制器满足：</p><ul><li><p>before参数，结果中的spittle的id都要在这个参数之前；</p></li><li><p>count参数，结果中要包含的spittle的个数</p></li></ul><p>测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(method=RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Spittle&gt; <span class="title">spittles</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        @RequestParam(value=<span class="string">"max"</span>, defaultValue=MAX_LONG_AS_STRING)</span> <span class="keyword">long</span> max, </span></span><br><span class="line"><span class="function">        @<span class="title">RequestParam</span><span class="params">(value=<span class="string">"count"</span>, defaultValue=<span class="string">"20"</span>)</span> <span class="keyword">int</span> count) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> spittleRepository.findSpittles(max, count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-通过路径参数接受输入"><a href="#2-通过路径参数接受输入" class="headerlink" title="2. 通过路径参数接受输入"></a>2. 通过路径参数接受输入</h3><p>假设现在应用需要展示单独的一篇Spittle，那么就需要一个id作为查询参数，对应的处理方法可以是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"show"</span>, method=RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">showSpittle</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        @RequestParam(<span class="string">"spittle_id"</span>)</span> <span class="keyword">long</span> spittleId,</span></span><br><span class="line"><span class="function">        Model model</span></span><br><span class="line"><span class="function">        ) </span>&#123;</span><br><span class="line">    model.addAttribute(spittleRepository.findOne(spittleId));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"spittle"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>为了满足路径参数，Spring MVC允许在@RequestMapping路径中使用占位符（需要用大括号包围），下面是使用占位符来接受一个id作为路径的一部分：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;spittleId&#125;"</span>, method=RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">spittle</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        @PathVariable(<span class="string">"spittleId"</span>)</span> <span class="keyword">long</span> spittleId,</span></span><br><span class="line"><span class="function">        Model model</span></span><br><span class="line"><span class="function">        ) </span>&#123;</span><br><span class="line">    model.addAttribute(spittleRepository.findOne(spittleId));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"spittle"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>spittle()方法的spittleId入参使用了@PathVariable(“spittleId”)注解，表明请求中占位符位置的值都会被传送到handler的spittleId参数。@RequestMapping中value属性的占位符必须和@PathVariable包裹的参数一致。如果@PathVariable中没有给定参数，那么将默认使用入参的册数参数名。即可以使用下面的方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;spittleId&#125;"</span>, method=RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">spittle</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        @PathVariable <span class="keyword">long</span> spittleId,</span></span></span><br><span class="line"><span class="function"><span class="params">        Model model</span></span></span><br><span class="line"><span class="function"><span class="params">        )</span> </span>&#123;</span><br><span class="line">    model.addAttribute(spittleRepository.findOne(spittleId));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"spittle"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-表单"><a href="#3-表单" class="headerlink" title="3.表单"></a>3.表单</h3><h4 id="3-1-处理表单"><a href="#3-1-处理表单" class="headerlink" title="3.1 处理表单"></a>3.1 处理表单</h4><ul><li>对于表单有两种处理方式：展示表单以及处理用户提交的表单数据。在Spittr中，需要提供一个供新用户进行注册的表单。</li></ul><p>SpitterController：展示用户注册表单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> web.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/spitter"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpittleController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 处理来自/spitter/register的get请求</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/register"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showRegistrationForm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"registerForm"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>showRegistrationForm方法的@RequestMapping注解，以及类级别的注解@RequestMapping，表明了这个方法会处理来自/spitter/register的get请求，该方法仅仅返回了一个名为registerForm的逻辑视图。根据之前在InternalResourceViewResolver中的配置，这个逻辑视图会导向到/WEB-INF/views/registerForm.jsp该界面。</p><h4 id="3-2-编写表单处理控制器"><a href="#3-2-编写表单处理控制器" class="headerlink" title="3.2 编写表单处理控制器"></a>3.2 编写表单处理控制器</h4><ul><li>在处理POST请求时，控制器需要接受表单数据并且将这些数据存储为一个Spitter对象。为了避免重复提交，应该重定向到一个新的界面：用户信息页。在处理post请求时，一个聪明的做法就是在处理完成后发送一个重定向的请求，从而可以避免重复提交。</li></ul><p>下面来实现控制器方法，从而可以处理注册请求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> SpitterRepository spitterRepository;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpitterController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注入SpitterRepository</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpitterController</span><span class="params">(SpitterRepository spitterRepository)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.spitterRepository = spitterRepository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">processRegistration</span><span class="params">(Spitter spitter)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 保存Spitter</span></span><br><span class="line">        spitterRepository.save(spitter);</span><br><span class="line">        <span class="comment">// 重定向到新的页面</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/spitter/"</span> + spitter.getUsername();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>processRegistration方法使用Spitter对象作为入参，该对象的属性会从请求中填充。该方法中调用了spitterRepository的save方法对Spitter对象进行存储。最后返回了一个带有redirect:的字符串。</p><p>当InternalResourceViewResolver遇到redirect:时，它会自动地将其当做一个重定向请求，从而可以重定向到用户详情页面，如/spitter/xiaoming。</p><p>同时，InternalResourceViewResolver也可以识别前缀forward:，这种情况下，请求会被转向到给定的URL地址。</p><h4 id="3-4-参数检验"><a href="#3-4-参数检验" class="headerlink" title="3.4 参数检验"></a>3.4 参数检验</h4><p>从Spring3.0开始，Spring支持Java校验api，从而可以从而可以不需要添加其他配置，仅仅需要有一个Java API 的实现，如Hibernate Validator。</p><p>Java Validation API定义了许多注解，可以使用这些注解来约束参数的值，所有的注解都在包javax.validation.constraints中。</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;spring MVC基于模型-控制器-视图（Model-Controller-View，MVC）模式实现，它能帮助你构建像spring框架的灵活和松耦合的Web应用程序。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="springMVC" scheme="http://codelin.com/categories/springMVC/"/>
    
    
      <category term="spring" scheme="http://codelin.com/tags/spring/"/>
    
      <category term="springMVC" scheme="http://codelin.com/tags/springMVC/"/>
    
  </entry>
  
  <entry>
    <title>面向切面的spring</title>
    <link href="http://codelin.com/2019/08/15/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%9A%84spring/"/>
    <id>http://codelin.com/2019/08/15/面向切面的spring/</id>
    <published>2019-08-15T04:31:42.000Z</published>
    <updated>2019-08-16T05:16:48.801Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://www.w3cschool.cn/attachments/image/20170802/1501662448352296.png" alt="面向切面的spring"></p><a id="more"></a><h2 id="什么是面向切面编程–AOP"><a href="#什么是面向切面编程–AOP" class="headerlink" title="什么是面向切面编程–AOP"></a>什么是面向切面编程–AOP</h2><ul><li>AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</li></ul><hr><h3 id="1-定义AOP术语"><a href="#1-定义AOP术语" class="headerlink" title="1.定义AOP术语"></a>1.定义AOP术语</h3><h4 id="1-1-通知（advice）–切面的工作"><a href="#1-1-通知（advice）–切面的工作" class="headerlink" title="1.1 通知（advice）–切面的工作"></a>1.1 通知（advice）–切面的工作</h4><ul><li><p>通知定义了切面是什么以及切面何时使用，除了描述了切面要完成的工作，还解决了何时执行这个工作的问题。spring切面可以应用5中类型的通知：</p><ul><li><ol><li>前置通知（Before）：在目标调用之前调用通知功能；</li></ol></li><li><ol start="2"><li>后置通知（After）：在目标方法完成之后调用通知，此时不会关心方法的输出是什么；</li></ol></li><li><ol start="3"><li>返回通知（After-returning）：在目标方法成功之后调用通知；</li></ol></li><li><ol start="4"><li>异常通知（After-throwing）：在目标方法抛出异常之后调用通知；</li></ol></li><li><ol start="5"><li>环绕通知（Around）：通知包裹了被通知的方法，在被通知的方法调用之前和之后执行自定义的行为；</li></ol></li></ul><h4 id="1-2-连接点（Join-point）"><a href="#1-2-连接点（Join-point）" class="headerlink" title="1.2 连接点（Join point）"></a>1.2 连接点（Join point）</h4><ul><li>连接点是在应用执行过程中能够插入切面的一个点。这个点可以是调用方法，抛出异常时，甚至修改一个字段时，切面代码可以利用这些点插入到应用的正常流程中，并添加新的行为。</li></ul><h4 id="1-3-切点（Pointcut）"><a href="#1-3-切点（Pointcut）" class="headerlink" title="1.3 切点（Pointcut）"></a>1.3 切点（Pointcut）</h4><ul><li>切点的定义会匹配通知所要织入的一个或多个连接点。通常使用明确的类名称和方法名称来指定这些切点。</li></ul><h4 id="1-4-切面（Aspect）"><a href="#1-4-切面（Aspect）" class="headerlink" title="1.4 切面（Aspect）"></a>1.4 切面（Aspect）</h4><ul><li>切面是通知和切点的结合，通知和切点共同定义了切面的全部内容–它是什么，在何时，何处完成其功能。</li></ul><h4 id="1-5-引入（Instruction）"><a href="#1-5-引入（Instruction）" class="headerlink" title="1.5 引入（Instruction）"></a>1.5 引入（Instruction）</h4><ul><li>引入允许我们向现有的类添加新方法和属性。</li></ul><h4 id="1-6-织入（Weaving）"><a href="#1-6-织入（Weaving）" class="headerlink" title="1.6 织入（Weaving）"></a>1.6 织入（Weaving）</h4><ul><li>织入是把切面应用到目标对象并创建新的代理对象的过程。切面在指定的连接点织入到目标对象中，在目标对象的生命周期有多个点可以织入：</li></ul></li><li><ol><li>编译期：切面在目标类编译时织入，这时需要特定的编译器；</li></ol></li><li><ol start="2"><li>类加载期：切面在目标类加载到JVM时被织入，这种方式需要特定的类加载器；</li></ol></li><li><p>3.运行期：切面在应用运行的某个期间织入；</p></li></ul><hr><h3 id="2-spring对AOP的支持"><a href="#2-spring对AOP的支持" class="headerlink" title="2.spring对AOP的支持"></a>2.spring对AOP的支持</h3><h4 id="2-1-spring通知是java编写的"><a href="#2-1-spring通知是java编写的" class="headerlink" title="2.1 spring通知是java编写的"></a>2.1 spring通知是java编写的</h4><ul><li>可以用与普通java开发一样的IDE来开发切面，而且，定义通知的所应用的切点通常都会使用注解或者spring配置文件里的XML编写。</li></ul><h4 id="2-2-spring在运行时通知对象"><a href="#2-2-spring在运行时通知对象" class="headerlink" title="2.2 spring在运行时通知对象"></a>2.2 spring在运行时通知对象</h4><ul><li>spring在运行期间把切面织入到spring管理的bean中</li></ul><h4 id="2-3-spring只支持方法级别的连接点"><a href="#2-3-spring只支持方法级别的连接点" class="headerlink" title="2.3 spring只支持方法级别的连接点"></a>2.3 spring只支持方法级别的连接点</h4><hr><h2 id="通过切点来选择连接点"><a href="#通过切点来选择连接点" class="headerlink" title="通过切点来选择连接点"></a>通过切点来选择连接点</h2><ul><li>在spring AOP中要用AspectJ的切点表达式来定义切点，下表列出了spring　AOP所支持的AspectJ切点指示器：</li></ul><table><thead><tr><th>AspectJ指示器</th><th>描述</th></tr></thead><tbody><tr><td>arg()</td><td>限制连接点匹配参数为指定类型的执行方法</td></tr><tr><td>@args()</td><td>限制连接点匹配参数为指定注解的执行方法</td></tr><tr><td>execution()</td><td>用于匹配是连接点的方法</td></tr><tr><td>this()</td><td>限制连接点匹配AOP代理的bean引用为指定类型的类</td></tr><tr><td>target()</td><td>限制连接点匹配对象为制定类型的类</td></tr><tr><td>@target()</td><td>限制连接点匹配特定的执行对象，这些对象对应的类要有指定类型的注解</td></tr><tr><td>within()</td><td>限制连接点匹配指定的类型</td></tr><tr><td>@within()</td><td>限制连接点匹配指定注解所标注的类型</td></tr><tr><td>@annotation</td><td>限定匹配带有指定注解的连接点</td></tr></tbody></table><p>在spring中尝试使用其他指示器时，会抛出IllegalArgument-Exception异常。注意，只有execution指示器是用来实际匹配的，其他指示器都是用来限制匹配的，这说明我们在编写切点定义时execution是常用的指示器。</p><h3 id="1-编写切点"><a href="#1-编写切点" class="headerlink" title="1.  编写切点"></a>1.  编写切点</h3><ul><li>定义了一个Performance接口：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ljc.concert;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Performance</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">perform</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>假设想编写Performance的perform（）方法触发的通知，下面展示了一个切点表达式，这个表达式能够设置当perforn（）执行时触发通知的调用。<br><img src="E:\MyBlog\photos\spring-01.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(*com.ljc.concert.Performance.perform(..))</span><br></pre></td></tr></table></figure><p>使用execution指示器来选择Performance的perform方法。方法表达式以*开始，表明不关心返回值的类型，然后指定了全限类名和方法名，对于参数列表用(..)表示表明切点要选择任意的perform方法，无论该方法的入参是什么。</p><ul><li>假设需要配置的切点仅仅匹配concert包，可以使用within()限制匹配：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(*com.ljc.concert.Performance.perform(..))&amp;&amp;within(com.ljc.concert.*)</span><br></pre></td></tr></table></figure></li></ul><p>使用&amp;&amp;操作符把execution和within连接在一起形成与（and）关系，<font color="red">注意：因为&amp;在XML中有特殊的含义，所以在spring的XML配置中描述切点时，可以使用and代替&amp;&amp;</font></p><h3 id="2-在切点中选择bean"><a href="#2-在切点中选择bean" class="headerlink" title="2. 在切点中选择bean"></a>2. 在切点中选择bean</h3><ul><li>除了上表中的指示器，spring还引入了一个新的bean（）指示器，它允许我们在切点表达式中用bean的ID来表示bean。bean（）使用bean ID或者bean名称来限制切点只匹配特定的bean，</li></ul><hr><h2 id="使用注解来创建切面"><a href="#使用注解来创建切面" class="headerlink" title="使用注解来创建切面"></a>使用注解来创建切面</h2><h3 id="1-定义切面"><a href="#1-定义切面" class="headerlink" title="1.定义切面"></a>1.定义切面</h3><ul><li>Audience类使用@Aspect进行了注解，表明Audience不仅是一个POJO，还是一个切面。Audience类中的方法都使用注解来定义切面的具体行为<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">package</span> com.ljc.concert;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterReturning;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterThrowing;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Audience</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//表演之前</span></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"execution(**com.ljc.concert.Performance.perform(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">silenceCellPhones</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Silencing Cell Phones..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"execution(**com.ljc.concert.Performance.perform(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeSeats</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Taking seats..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//表演之后</span></span><br><span class="line">    <span class="meta">@AfterReturning</span>(<span class="string">"execution(**com.ljc.concert.Performance.perform(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">applause</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Clap..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//表演失败之后</span></span><br><span class="line">    <span class="meta">@AfterThrowing</span>(<span class="string">"execution(**com.ljc.concert.Performance.perform(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demandRefound</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Demanding a refund..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>Aspect提供了5个注解来定义通知:</li></ul><table><thead><tr><th>注解</th><th>通知</th></tr></thead><tbody><tr><td>@After</td><td>通知方法会在目标方法返回或者抛出异常后调用</td></tr><tr><td>@AfterReturning</td><td>通知方法会在目标方法返回后调用</td></tr><tr><td>@AfterThrowing</td><td>通知方法会在异常抛出后调用</td></tr><tr><td>@Around</td><td>通知方法会将目标方法封装起来</td></tr><tr><td>@before</td><td>通知方法会在目标方法调用之前执行</td></tr></tbody></table><p>上面的切点表达式我们重复了4遍，其实我们可以只定义一次，然后在每次使用它时调用它就可以了：@Poincut可以在一个切面内定义可重用的切点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ljc.concert;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Audience</span></span>&#123;</span><br><span class="line">    <span class="comment">//定义切点</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(**com.ljc.concert.Performance.perform(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performance</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//表演之前</span></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"performance()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">silenceCellPhones</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Silencing Cell Phones..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"performance()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeSeats</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Taking seats..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//表演之后</span></span><br><span class="line">    <span class="meta">@AfterReturning</span>(<span class="string">"performance()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">applause</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Clap..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//表演失败之后</span></span><br><span class="line">    <span class="meta">@AfterThrowing</span>(<span class="string">"performance()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demandRefound</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Demanding a refund..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-1-在JavaConfig中启用AspectJ注解的自动代理"><a href="#1-1-在JavaConfig中启用AspectJ注解的自动代理" class="headerlink" title="1.1 在JavaConfig中启用AspectJ注解的自动代理"></a>1.1 在JavaConfig中启用AspectJ注解的自动代理</h4><ul><li>使用javaConfig的话，可以在配置类的类级别上通过使用EnbleAspectJ-AutoProxy注解启用自动代理功能：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ljc.concert;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">//启用AspectJ自动代理</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcertConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//声明Audience bean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Audience <span class="title">audience</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Audience();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="1-2-在XML中，通过spring的aop命名空间启用AspectJ注解的自动代理"><a href="#1-2-在XML中，通过spring的aop命名空间启用AspectJ注解的自动代理" class="headerlink" title="1.2 在XML中，通过spring的aop命名空间启用AspectJ注解的自动代理"></a>1.2 在XML中，通过spring的aop命名空间启用AspectJ注解的自动代理</h4><ul><li>使用spring aop命名空间的aop:aspectj-autoproxy元素：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.ljc.concert"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.ljc.concert.Audience"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-创建环绕通知"><a href="#2-创建环绕通知" class="headerlink" title="2. 创建环绕通知"></a>2. 创建环绕通知</h3><ul><li>环绕通知是最为强大的通知类型，它能够让你所编写的逻辑将被通知的目标方法完全包装起来，就像在一个方法中通知编写了前置和后置通知，用环绕通知重写Audience切面：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ljc.concert;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Audience</span></span>&#123;</span><br><span class="line">    <span class="comment">//定义切点</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(**com.ljc.concert.Performance.perform(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performance</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//环绕通知</span></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"performance()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">watchPerformance</span><span class="params">(ProceedingJoinPoint jp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Silencing Cell Phones..."</span>);</span><br><span class="line">        System.out.println(<span class="string">"Taking seats..."</span>);</span><br><span class="line">        jp.proceed();</span><br><span class="line">        System.out.println(<span class="string">"Clap..."</span>);</span><br><span class="line">        System.out.println(<span class="string">"Demanding a refund..."</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="在XML中声明切面"><a href="#在XML中声明切面" class="headerlink" title="在XML中声明切面"></a>在XML中声明切面</h2><ul><li>原则：基于注解的配置要优于基于java的注解的配置，基于java的配置要优于基于XML的配置。但是，需要声明切面，但是又不能为通知类添加注解的通知，那么就必须转向XML配置了。</li></ul><h3 id="1-声明前置通知和后置通知"><a href="#1-声明前置通知和后置通知" class="headerlink" title="1.声明前置通知和后置通知"></a>1.声明前置通知和后置通知</h3><h4 id="1-1-通过XML将无注解的Audience声明为切面"><a href="#1-1-通过XML将无注解的Audience声明为切面" class="headerlink" title="1.1 通过XML将无注解的Audience声明为切面"></a>1.1 通过XML将无注解的Audience声明为切面</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"audience"</span>&gt;</span></span><br><span class="line">           </span><br><span class="line">           <span class="tag">&lt;<span class="name">aop:before</span> </span></span><br><span class="line"><span class="tag">                   <span class="attr">pointcut</span>=<span class="string">"execution(** com.ljc.concert.Performance.perform(..))"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">method</span>=<span class="string">"silencePhone"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="tag">&lt;<span class="name">aop:before</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">pointcut</span>=<span class="string">"execution(** com.ljc.concert.Performance.perform(..))"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">method</span>=<span class="string">"takeSeats"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="tag">&lt;<span class="name">aop:after-returning</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">pointcut</span>=<span class="string">"execution(** com.ljc.concert.Performance.perform(..))"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">method</span>=<span class="string">"applause"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="tag">&lt;<span class="name">aop:after-throwing</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">pointcut</span>=<span class="string">"execution(** com.ljc.concert.Performance.perform(..))"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">method</span>=<span class="string">"demandRefound"</span>/&gt;</span></span><br><span class="line">           </span><br><span class="line">       <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>大多数的配置必须在aop：config的上下文内使用，我们可以声明一个或者多个通知器，切面或者切点。ref元素引用了一个POJO bean，该bean实现了切面的功能（这里就是audience），ref元素所引用的bean提供了在切面中通知被调用的方法。</p><h4 id="1-2-使用aop：pointcut定义命名切点"><a href="#1-2-使用aop：pointcut定义命名切点" class="headerlink" title="1.2 使用aop：pointcut定义命名切点"></a>1.2 使用aop：pointcut定义命名切点</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"audience"</span>&gt;</span></span><br><span class="line">           </span><br><span class="line">           <span class="tag">&lt;<span class="name">aop:pointcut</span> </span></span><br><span class="line"><span class="tag">                   <span class="attr">id</span>=<span class="string">"performance"</span> </span></span><br><span class="line"><span class="tag">                   <span class="attr">expression</span>=<span class="string">"execution(** com.ljc.concert.Performance.perform(..)"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="tag">&lt;<span class="name">aop:before</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">pointcut-ref</span>=<span class="string">"performance"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">method</span>=<span class="string">"silencePhone"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="tag">&lt;<span class="name">aop:before</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">pointcut-ref</span>=<span class="string">"performance"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">method</span>=<span class="string">"takeSeats"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="tag">&lt;<span class="name">aop:after-returning</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">pointcut-ref</span>=<span class="string">"performance"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">method</span>=<span class="string">"applause"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="tag">&lt;<span class="name">aop:after-throwing</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">pointcut-ref</span>=<span class="string">"performance"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">method</span>=<span class="string">"demandRefound"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-声明环绕通知"><a href="#2-声明环绕通知" class="headerlink" title="2. 声明环绕通知"></a>2. 声明环绕通知</h3><ul><li>相对于前置通知和后置通知，环绕通知有明显的优势，它可以完成前置通知和后置通知的所实现的相同功能，而且只需要在一个方法中声明，使用aop：around元素就可以：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"audience"</span>&gt;</span></span><br><span class="line">           </span><br><span class="line">           <span class="tag">&lt;<span class="name">aop:pointcut</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">id</span>=<span class="string">"performance"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">expression</span>=<span class="string">"execution(** com.ljc.concert.Performance.perform(..)"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">aop:around</span> </span></span><br><span class="line"><span class="tag">                  <span class="attr">pointcut-ref</span>=<span class="string">"performance"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">method</span>=<span class="string">"watchPerformance"</span>/&gt;</span></span><br><span class="line">           </span><br><span class="line">       <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="注入AspectJ切面"><a href="#注入AspectJ切面" class="headerlink" title="注入AspectJ切面"></a>注入AspectJ切面</h2><ul><li>虽然spring AOP能够满足许多应用的切面需求，但是与AspectJ相比，spring AOP是一个功能相对较弱的AOP解决方案，AspectJ提供了许多spring AOP所不能支持的许多类型的切点。新建一个切面CriticAspect，主要职责就是在表演结束之后给出意见：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ljc.concert;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> aspect CriticAspect &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CriticAspect</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    pointcut:performance():execution(*perform(..));</span><br><span class="line">    </span><br><span class="line">    afterReturning():performance()&#123;</span><br><span class="line">        System.out.println(criticismEngine.getCriticism());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> CriticismEngine criticismEngine;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCriticismEngine</span><span class="params">(CriticismEngine criticismEngine)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.criticismEngine=criticismEngine;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://www.w3cschool.cn/attachments/image/20170802/1501662448352296.png&quot; alt=&quot;面向切面的spring&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="spring" scheme="http://codelin.com/categories/spring/"/>
    
    
      <category term="spring" scheme="http://codelin.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>网络爬虫--基于java</title>
    <link href="http://codelin.com/2019/08/13/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB-%E5%9F%BA%E4%BA%8Ejava/"/>
    <id>http://codelin.com/2019/08/13/网络爬虫-基于java/</id>
    <published>2019-08-13T13:17:59.000Z</published>
    <updated>2019-08-14T05:51:47.364Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1565712985941&di=3fdb3a5e07be113b326d9d0c12e90585&imgtype=0&src=http%3A%2F%2Fwx2.sinaimg.cn%2Flarge%2Fc5131475ly1fsjtexv0cyj20gj09a40f.jpg" alt="爬虫"></p><a id="more"></a><h1 id="网络爬虫介绍"><a href="#网络爬虫介绍" class="headerlink" title="网络爬虫介绍"></a>网络爬虫介绍</h1><h2 id="什么是网络爬虫"><a href="#什么是网络爬虫" class="headerlink" title="什么是网络爬虫"></a>什么是网络爬虫</h2><ul><li><ol><li>网络爬虫（又被称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者），是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。另外一些不常使用的名字还有蚂蚁、自动索引、模拟程序或者蠕虫。</li></ol></li><li><ol start="2"><li>网络爬虫是一个自动提取网页的程序，它为搜索引擎从万维网上下载网页，是搜索引擎的重要组成。传统爬虫从一个或若干初始网页的URL开始，获得初始网页上的URL，在抓取网页的过程中，不断从当前页面上抽取新的URL放入队列,直到满足系统的一定停止条件。聚焦爬虫的工作流程较为复杂，需要根据一定的网页分析算法过滤与主题无关的链接，保留有用的链接并将其放入等待抓取的URL队列。然后，它将根据一定的搜索策略从队列中选择下一步要抓取的网页URL，并重复上述过程，直到达到系统的某一条件时停止。另外，所有被爬虫抓取的网页将会被系统存贮，进行一定的分析、过滤，并建立索引，以便之后的查询和检索；对于聚焦爬虫来说，这一过程所得到的分析结果还可能对以后的抓取过程给出反馈和指导。</li></ol></li></ul><h2 id="入门程序"><a href="#入门程序" class="headerlink" title="入门程序"></a>入门程序</h2><h3 id="1-在pom-xml添加配置文件"><a href="#1-在pom-xml添加配置文件" class="headerlink" title="1.在pom.xml添加配置文件"></a>1.在pom.xml添加配置文件</h3><ul><li>httpClient：<a href="https://mvnrepository.com/search?q=httpclient" target="_blank" rel="noopener">https://mvnrepository.com/search?q=httpclient</a></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>slf4j:<a href="https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12" target="_blank" rel="noopener">https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12</a></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-创建log4j-properties文件："><a href="#2-创建log4j-properties文件：" class="headerlink" title="2.创建log4j.properties文件："></a>2.创建log4j.properties文件：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=DEBUG,A1</span><br><span class="line">log4j.logger.com.ljc=DEBUG</span><br><span class="line"></span><br><span class="line">log4j.appender.A1=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.A1.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.A1.layout.ConversionPattern=%-d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125;[%t] [%c]-[%p] %m%n</span><br></pre></td></tr></table></figure><h3 id="3-代码："><a href="#3-代码：" class="headerlink" title="3.代码："></a>3.代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ljc.crawler.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.util.EntityUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrawlerFirst</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.打开浏览器，创建HttpClient对象</span></span><br><span class="line">        CloseableHttpClient httpClient= HttpClients.createDefault();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.输入网址，发起get请求创建HttpGet对象</span></span><br><span class="line">        HttpGet httpGet=<span class="keyword">new</span> HttpGet(<span class="string">"http://www.baidu.com"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.按回车，发起请求，返回响应，使用HttpClient对象发起请求</span></span><br><span class="line">        CloseableHttpResponse response=httpClient.execute(httpGet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.解析响应，获取数据</span></span><br><span class="line">        <span class="comment">//判断状态码是否为200</span></span><br><span class="line">        <span class="keyword">if</span>(response.getStatusLine().getStatusCode()==<span class="number">200</span>)&#123;</span><br><span class="line">            HttpEntity httpEntity=response.getEntity();</span><br><span class="line">            String content= EntityUtils.toString(httpEntity,<span class="string">"utf8"</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(content);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="HttpClient"><a href="#HttpClient" class="headerlink" title="HttpClient"></a>HttpClient</h2><h3 id="1-Get请求：带参数"><a href="#1-Get请求：带参数" class="headerlink" title="1. Get请求：带参数"></a>1. Get请求：带参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置请求地址是：http://yun.itheima.com/search?keys=java</span></span><br><span class="line">        <span class="comment">//创建URINuilder</span></span><br><span class="line">        URIBuilder uriBuilder=<span class="keyword">new</span> URIBuilder(<span class="string">"http://yun.itheima.com/search?keys=java"</span>);</span><br><span class="line">        <span class="comment">//设置参数</span></span><br><span class="line">        uriBuilder.setParameter(<span class="string">"keys"</span>,<span class="string">"java"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建HttpGet对象，设置URL地址</span></span><br><span class="line">        HttpGet httpGet=<span class="keyword">new</span> HttpGet(uriBuilder.build());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"发起请求的信息："</span>+httpGet);</span><br></pre></td></tr></table></figure><ul><li>如果是无参数的GET请求，则直接使用构造方法<font color="red"> HttpGet(String url) </font>创建HttpGet对象即可；<br>如果是带参数GET请求，则可以先使用<font color="red">URIBuilder(String url) </font>创建对象，再调用<font color="red">addParameter(String param, String value)，或setParameter(String param, String value)</font>来设置请求参数，并调用build()方法构建一个URI对象。只有构造方法HttpGet(URI uri)来创建HttpGet对象。</li></ul><h3 id="2-POST请求：带参数"><a href="#2-POST请求：带参数" class="headerlink" title="2.POST请求：带参数"></a>2.POST请求：带参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建HttpPost对象，设置URL地址</span></span><br><span class="line">       HttpPost httpPost=<span class="keyword">new</span> HttpPost(<span class="string">"http://yun.itheima.com/search"</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//声明List集合：封装表单中的参数</span></span><br><span class="line">       List&lt;NameValuePair&gt; params=<span class="keyword">new</span> ArrayList&lt;NameValuePair&gt;();</span><br><span class="line">       params.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">"keys"</span>,<span class="string">"java"</span>));</span><br><span class="line"></span><br><span class="line">       <span class="comment">//创建表单的Entity对象</span></span><br><span class="line">       UrlEncodedFormEntity formEntity=<span class="keyword">new</span> UrlEncodedFormEntity(params,<span class="string">"utf8"</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//设置表单的Entity实体对象到Post请求中</span></span><br><span class="line">       httpPost.setEntity(formEntity);</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">"发起请求的信息："</span>+httpPost);</span><br></pre></td></tr></table></figure><ul><li><p>如果是无参数的GET请求，则直接使用构造方法<font color="red">HttpPost(String url)</font>创建HttpPost对象即可；<br>如果是带参数POST请求，先构建HttpEntity对象并设置请求参数，然后调用<font color="red">setEntity(HttpEntity entity)</font>创建HttpPost对象</p><h3 id="3-连接池"><a href="#3-连接池" class="headerlink" title="3.连接池"></a>3.连接池</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">package</span> com.ljc.crawler.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.HttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.conn.PoolingHttpClientConnectionManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.util.EntityUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 林军成</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> -13:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpPoolTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建连接池管理器</span></span><br><span class="line">        PoolingHttpClientConnectionManager cm=<span class="keyword">new</span> PoolingHttpClientConnectionManager();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置连接数</span></span><br><span class="line">        cm.setMaxTotal(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置每个主机的最大连接数</span></span><br><span class="line">        cm.setDefaultMaxPerRoute(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用连接池管理器发起请求</span></span><br><span class="line">        doGet(cm);</span><br><span class="line">        doGet(cm);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(PoolingHttpClientConnectionManager cm)</span>  </span>&#123;</span><br><span class="line">        <span class="comment">//不是每次创建新的HttpClient，而是从连接池中获取HttpClient对象</span></span><br><span class="line">        CloseableHttpClient httpClient= HttpClients.custom().setConnectionManager(cm).build();</span><br><span class="line"></span><br><span class="line">        HttpGet httpGet=<span class="keyword">new</span> HttpGet(<span class="string">"http://www.csdn.net"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用HttpClient发起请求，获取response</span></span><br><span class="line">        CloseableHttpResponse response=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response = httpClient.execute(httpGet);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//解析响应</span></span><br><span class="line">            <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="number">200</span>) &#123;</span><br><span class="line">                HttpEntity httpEntity = response.getEntity();</span><br><span class="line">                String content = EntityUtils.toString(httpEntity, <span class="string">"utf8"</span>);</span><br><span class="line"></span><br><span class="line">                System.out.println(content.length());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(response!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="comment">// 关闭response,不能关闭HttpClient</span></span><br><span class="line">                    response.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-请求参数"><a href="#4-请求参数" class="headerlink" title="4.请求参数"></a>4.请求参数</h3><ul><li>有时候因为网络或者目标服务器的原因，请求需要很长的时间才能完成，我们需要自定义相关时间<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置请求信息</span></span><br><span class="line">        RequestConfig config=RequestConfig.custom().setConnectTimeout(<span class="number">1000</span>)    <span class="comment">//创建连接的最长时间，单位是毫秒</span></span><br><span class="line">                   .setConnectionRequestTimeout(<span class="number">500</span>)         <span class="comment">//设置获取连接的最长时间，单位是毫秒</span></span><br><span class="line">                   .setSocketTimeout(<span class="number">10</span>*<span class="number">1000</span>)                <span class="comment">//设置数据传输的最长时间，单位是毫秒</span></span><br><span class="line">                   .build();</span><br><span class="line">        <span class="comment">//给请求设置请求信息</span></span><br><span class="line">        httpGet.setConfig(config);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1565712985941&amp;di=3fdb3a5e07be113b326d9d0c12e90585&amp;imgtype=0&amp;src=http%3A%2F%2Fwx2.sinaimg.cn%2Flarge%2Fc5131475ly1fsjtexv0cyj20gj09a40f.jpg&quot; alt=&quot;爬虫&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://codelin.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="java" scheme="http://codelin.com/tags/java/"/>
    
      <category term="爬虫" scheme="http://codelin.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>spring高级装配</title>
    <link href="http://codelin.com/2019/08/13/spring%E9%AB%98%E7%BA%A7%E8%A3%85%E9%85%8D/"/>
    <id>http://codelin.com/2019/08/13/spring高级装配/</id>
    <published>2019-08-13T05:40:27.000Z</published>
    <updated>2019-08-13T08:52:56.094Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://images2018.cnblogs.com/blog/622489/201805/622489-20180519092514495-1501179669.png" alt="spring"></p><a id="more"></a><h1 id="spring高级装配"><a href="#spring高级装配" class="headerlink" title="spring高级装配"></a>spring高级装配</h1><hr><h2 id="spring-profile"><a href="#spring-profile" class="headerlink" title="spring profile"></a>spring profile</h2><hr><h3 id="1-配置profile-bean"><a href="#1-配置profile-bean" class="headerlink" title="1.配置profile bean"></a>1.配置profile bean</h3><ul><li>在3.1版本中，spring引入了spring profile的功能。要使用profile，首先要将所有不同的bean定义整理到一个或多个profile中，在将应用部署到每个环境中，要保证对应得profile处于激活（active）状态。</li></ul><h4 id="1-1-java中配置profile"><a href="#1-1-java中配置profile" class="headerlink" title="1.1 java中配置profile"></a>1.1 java中配置profile</h4><ul><li>可以使用@Profile注解指定某一个bean属于哪一个profile。例如，在配置类中，嵌入式数据库的DataSource可能会配置成这样：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ljc.myapp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Profile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Profile</span>(<span class="string">"dev"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DevelopmentProfileConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span>(destroyMethod = <span class="string">"shutdown"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>@Profile应用在类级别上，它会告诉spring这个配置类的bean只有在dev profile激活时才会创建。如果dev profile没有激活的话，那么带有@Bean注解的方法都会被忽略掉。</p><ul><li>在spring3.1中，只能在类级别上使用@Profile注解，不过，从spring3.2开始，也可以在方法级别使用@Profile注解，与@bean一同使用。这样就能将这个bean的声明放到同一个配置类中。</li></ul><h4 id="1-2-在XML中配置profile"><a href="#1-2-在XML中配置profile" class="headerlink" title="1.2 在XML中配置profile"></a>1.2 在XML中配置profile</h4><ul><li>可以使用bean元素的profile属性，在XML中配置profile bean。例如，在XML中定义适用于开发阶段的嵌入式数据库DataSource bean，可以创建如下的XML文件：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:jdbc</span>=<span class="string">"http://www.springframework.org/schema/jdbc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/jdbc </span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/jdbc/spring-jdbc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">profile</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">jdbc:embedded-database</span> <span class="attr">id</span>=<span class="string">"dataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbc:script</span> <span class="attr">location</span>=<span class="string">"classpath:schema.sql"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbc:script</span> <span class="attr">location</span>=<span class="string">"classpath:test-data.sql"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">jdbc:embedded-database</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-激活profile"><a href="#2-激活profile" class="headerlink" title="2.激活profile"></a>2.激活profile</h3><ul><li>spring在确定哪个profile处于激活状态时，需要依赖两个独立的属性：spring。profile。active和spring。profile。default。如果设置了spring。profile。active的值，它的值就会用来确定哪个profile是激活的。但如果没有设置spring。profile。active属性的话，那么spring就会查找spring。profile。default的值，如果都没有设置的话，那就没有激活的profile，那就只能创建那些没有定义在profile的bean。</li></ul><hr><h2 id="条件化的bean"><a href="#条件化的bean" class="headerlink" title="条件化的bean"></a>条件化的bean</h2><ul><li>如果希望一个或者多个bean只有在应用的类路径下包含特定的库时才创建。或者希望某个bean只有在当另外的特定的bean也声明了之后才会创建，还可能要求某个环境变量设置之后，才会创建某个bean。在spring4之前很难实现这种操作，但是spring4引入了一个新的注解@Conditionnl，它可以用到带有@Bean注解的方法上，弱国给定的结果为true，就会创建这个bean，否则的话，这个bean会被忽略。</li></ul><h3 id="1-条件化的配置bean"><a href="#1-条件化的配置bean" class="headerlink" title="1.条件化的配置bean"></a>1.条件化的配置bean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Conditional</span>(MagicExistsCondition.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> MagicBean <span class="title">magicBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MagicBean();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，@Conditional给定了条件–MagicExistsCondition。@Conditional将会通过Condition接口进行条件对比;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">matchs</span><span class="params">(ConditionContext ctxt, AnnotatedTypeMetadata metadata)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>如果 matchs（）方法返回true，那么就会创建带有@Conditional注解的bean，如果返回false，则不会创建这些bean</p><h3 id="2-检查是否存在某属性"><a href="#2-检查是否存在某属性" class="headerlink" title="2.检查是否存在某属性"></a>2.检查是否存在某属性</h3><ul><li>在本例中，我们需要创建Condition的实现，并根据环境中是否存在magic属性来做决策：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ljc.myapp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Condition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ConditionContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotatedTypeMetadata;</span><br><span class="line"><span class="keyword">import</span> sun.tools.java.Environment;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MagicExistsCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata)</span> </span>&#123;</span><br><span class="line">        Environment env=context.getEnvirment;</span><br><span class="line">        <span class="keyword">return</span> env.containsProperty(<span class="string">"magic"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>matchs()方法很简单但功能强大，它通过给定的ConditionContext对象得到Environment对象，并用这个对象检查环境是否存在magic属性，属性的值是什么无所谓，只要满足条件就可以，满足就返回true，否则返回false</p><ul><li><p>ConditionContext接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ConditionContext</span> </span>&#123;</span><br><span class="line">    <span class="function">BeanDefinitionRegistry <span class="title">getRegistry</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">ConfigurableListableBeanFactory <span class="title">getBeanFactory</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Environment <span class="title">getEnvironment</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ResourceLoader <span class="title">getResourceLoader</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">ClassLoader <span class="title">getClassLoader</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过ConditionContext接口，可以做到如下几点：</p></li><li><ol><li>借助getRegistry()返回的BeanDefinitionRegistry检查bean定义</li></ol></li><li><ol start="2"><li>借助getBeanFactory()返回的ConfigurableListableBeanFactory 检查bean是否存在，甚至探查bean的属性</li></ol></li><li><ol start="3"><li>借助getEnvironment()返回的Environment检查环境变量是否存在以及它的值是什么</li></ol></li><li><ol start="4"><li>读取并探查getResourceLoader()返回的ResourceLoader所加载的资源</li></ol></li><li><ol start="5"><li>借助getClassLoader()返回的ClassLoader加载并检查类是否存在</li></ol></li><li><p>AnnotatedTypeMetadata接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AnnotatedTypeMetadata</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isAnnotated</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">Map&lt;String, Object&gt; <span class="title">getAnnotationAttributes</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">Map&lt;String, Object&gt; <span class="title">getAnnotationAttributes</span><span class="params">(String var1, <span class="keyword">boolean</span> var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">MultiValueMap&lt;String, Object&gt; <span class="title">getAllAnnotationAttributes</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">MultiValueMap&lt;String, Object&gt; <span class="title">getAllAnnotationAttributes</span><span class="params">(String var1, <span class="keyword">boolean</span> var2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>借助isAnnotated方法，能够判断带有@Bean注解的方法是不是还有其他特定的注解。借助其他方法，能够检查@Bean注解的方法上其他的注解的属性</p><hr><h2 id="处理自动装配的歧义性"><a href="#处理自动装配的歧义性" class="headerlink" title="处理自动装配的歧义性"></a>处理自动装配的歧义性</h2><ul><li>当发生歧义性时，spring提供了多种可选的方案来解决这样的问题。可以将某个bean设为首选（primary）的bean，或者使用限定符（qualifier）来帮助spring将可选的范围缩小到只有一个。</li></ul><h3 id="1-标示首选的bean"><a href="#1-标示首选的bean" class="headerlink" title="1.标示首选的bean"></a>1.标示首选的bean</h3><ul><li><p>下面的代码显示了如何将@Component注解的bean声明为首选的bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>()</span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SgtPeppers</span> <span class="keyword">implements</span> <span class="title">CompactDisc</span> </span>&#123;</span><br></pre></td></tr></table></figure></li><li><p>通过java代码显示的声明，那么@Bean的方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="meta">@Conditional</span>(MagicExistsCondition.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> MagicBean <span class="title">magicBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MagicBean();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果使用XML配置的话，bean元素有一个primary属性用来指定首选的bean：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span>  <span class="attr">id</span>=<span class="string">"CompactDisc"</span> </span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">"com.ljc.soundsystem.SgtPeppers"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">primary</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-限定自动装配的bean"><a href="#2-限定自动装配的bean" class="headerlink" title="2.限定自动装配的bean"></a>2.限定自动装配的bean</h3><ul><li>确保将CompactDisc注入到setCompactDisc中：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"CompactDisc"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCompactDisc</span><span class="params">(CompactDisc compactDisc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.compactDisc=compactDisc;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="bean的作用域"><a href="#bean的作用域" class="headerlink" title="bean的作用域"></a>bean的作用域</h2><ul><li><p>在默认情况下，spring应用上下文中的所有bean都是作为以单例（singleton）模式创建的，也就是说，不管给定的一个bean被注入到其他bean多少次，每次所注入的都是同一个实例。spring定义了多种作用域，可以基于这些作用域创建bean，包括：</p><ol><li>单例（singleton）：在整个应用中，只创建bean一个实例；</li><li>原型（propotype）：每次注入或者通过spring应用上下文获取的时候，都会创建一个新的bean实例；</li><li>会话（session）：在Web应用中，为每个会话创建一个bean；</li><li>请求（Rquest）：在web应用中，为每个请求创建一个bean；</li></ol><ul><li>单例是默认的，如果选择其他的作用域，要使用@Scope注解，可以和@Bean或@Component注解一起使用</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/622489/201805/622489-20180519092514495-1501179669.png&quot; alt=&quot;spring&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="spring" scheme="http://codelin.com/categories/spring/"/>
    
    
      <category term="spring" scheme="http://codelin.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring的核心---spring容器</title>
    <link href="http://codelin.com/2019/08/12/Spring%E7%9A%84%E6%A0%B8%E5%BF%83/"/>
    <id>http://codelin.com/2019/08/12/Spring的核心/</id>
    <published>2019-08-12T08:24:26.000Z</published>
    <updated>2019-08-13T05:21:49.297Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=1162677372,203309198&fm=26&gp=0.jpg" alt="spring"></p><a id="more"></a><h1 id="spring的核心—spring容器"><a href="#spring的核心—spring容器" class="headerlink" title="spring的核心—spring容器"></a>spring的核心—spring容器</h1><h2 id="spring基本概念"><a href="#spring基本概念" class="headerlink" title="spring基本概念"></a>spring基本概念</h2><hr><h4 id="什么是spring框架"><a href="#什么是spring框架" class="headerlink" title="什么是spring框架"></a>什么是spring框架</h4><ul><li>Spring是一个开源框架，Spring是于2003 年兴起的一个轻量级的Java 开发框架，由Rod Johnson 在其著作Expert One-On-One J2EE Development and Design中阐述的部分理念和原型衍生而来。它是为了解决企业应用开发的复杂性而创建的。框架的主要优势之一就是其分层架构，分层架构允许使用者选择使用哪一个组件，同时为 J2EE 应用程序开发提供集成的框架。Spring使用基本的JavaBean来完成以前只可能由EJB完成的事情。然而，Spring的用途不仅限于服务器端的开发。从简单性、可测试性和松耦合的角度而言，任何Java应用都可以从Spring中受益。<font color="red">Spring的核心是控制反转（IoC）和面向切面（AOP）。</font><br>简单来说，Spring是一个分层的JavaSE/EE full-stack(一站式) 轻量级开源框架。</li></ul><hr><h4 id="spring的体系结构"><a href="#spring的体系结构" class="headerlink" title="spring的体系结构"></a>spring的体系结构</h4><ul><li><p>spring框架是一个分层架构，包含一系列的功能要素，被分为大约20个模块。这些模块分为<font color="green">Core Container，Data Access/Integration,Web,AOP,测试部分</font></p></li><li><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1565609755325&di=76f600939d873acb28d6105503c508d7&imgtype=0&src=http%3A%2F%2Fimg.mp.itc.cn%2Fupload%2F20170126%2Fd4968fc8035d465a9ccf69a79ce4d022_th.jpeg" alt="spring体系结构"></p></li></ul><hr><ul><li>让我们逐一浏览spring模块</li></ul><h5 id="spring核心容器—管理着bean的创建，配置和管理"><a href="#spring核心容器—管理着bean的创建，配置和管理" class="headerlink" title="spring核心容器—管理着bean的创建，配置和管理"></a>spring核心容器—管理着bean的创建，配置和管理</h5><ul><li><p>bean 工厂：为spring提供DI的功能</p></li><li><p>应用上下文：提供了配置spring的方式</p></li></ul><h5 id="spring的AOP模块—面向切面编程"><a href="#spring的AOP模块—面向切面编程" class="headerlink" title="spring的AOP模块—面向切面编程"></a>spring的AOP模块—面向切面编程</h5><ul><li>AOP：帮助应用对象解耦</li></ul><h5 id="数据访问与集成"><a href="#数据访问与集成" class="headerlink" title="数据访问与集成"></a>数据访问与集成</h5><ul><li><p>JDBC：抽象了板式代码，使数据库代码变得简洁明了</p></li><li><p>ORM：对许多流行的ORM框架进行了集成，例如Hibernate。spring的事务管理支持所有的ORM框架以及JDBC</p></li><li><p>JMS：使用消息以异步的方式与其他应用集成，从spring3.0开始，本模块还包含对象到XML映射的特性</p></li></ul><h5 id="Web与远程调用—MVC（Model-View-Controller）"><a href="#Web与远程调用—MVC（Model-View-Controller）" class="headerlink" title="Web与远程调用—MVC（Model-View-Controller）"></a>Web与远程调用—MVC（Model-View-Controller）</h5><h5 id="Instrumentation"><a href="#Instrumentation" class="headerlink" title="Instrumentation"></a>Instrumentation</h5><ul><li>提供了为JVM添加代理的功能。具体来讲，为Tomcat提供了一个植入代理，能够为Tomcat传递类文件，就像这些文件是被类加载器加载的一样</li></ul><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><ul><li>为使用JNDI，Servlet和Portlet编写单元提供了一些列的mock对象实现</li></ul><hr><h2 id="装配Bean"><a href="#装配Bean" class="headerlink" title="装配Bean"></a>装配Bean</h2><ul><li>在XML中进行显示配置</li><li>在java中进行显示配置</li><li>隐式的bean发现机制和自动装配</li></ul><hr><h3 id="自动化装配bean：组件扫描和自动装配"><a href="#自动化装配bean：组件扫描和自动装配" class="headerlink" title="自动化装配bean：组件扫描和自动装配"></a>自动化装配bean：组件扫描和自动装配</h3><h4 id="1-创建可被发现的bean"><a href="#1-创建可被发现的bean" class="headerlink" title="1.创建可被发现的bean"></a>1.创建可被发现的bean</h4><ul><li><p>1.1 CompactDisc接口定义了CD的概念</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ljc.soundsystem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CompactDisc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>1.2 带有@Component注解的CompactDisc实现类SgtPeppers</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ljc.soundsystem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SgtPeppers</span> <span class="keyword">implements</span> <span class="title">CompactDisc</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title=<span class="string">"Sgt.Pepeers's Lonely Hearts Club Band"</span>;</span><br><span class="line">    <span class="keyword">private</span> String artist=<span class="string">"The Beatles"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Playing"</span>+title+<span class="string">"by"</span>+artist);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@Compoment注解：表明该类会作为组件类，并告知spring要为这个类创建bean</p></li><li><p>1.3  @ComponentScan注解启用了组件扫描—组件扫描默认是不开启的，需要显示配置一下spring，从而命令它去寻找带有@Component注解的类，并为其创建bean</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ljc.soundsystem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="2-为组件扫描的bean命名"><a href="#2-为组件扫描的bean命名" class="headerlink" title="2. 为组件扫描的bean命名"></a>2. 为组件扫描的bean命名</h4><ul><li><p>2.1&nbsp;&nbsp;spring给所有的bean都有一个ID。在前面的例子中，我们没有为SgtPeppersbean设置ID，但spring会根据类名为其指定一个ID，为sgtPeppers，也就是类名的第一个字母变为小写</p></li><li><p>2.2&nbsp;&nbsp;方法1：将期望的ID值传递给@Component注解。例如想让这个标识为lin，只需要像下面配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"lin"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SgtPeppers</span> <span class="keyword">implements</span> <span class="title">CompactDisc</span> </span>&#123;</span><br><span class="line">    ...&#125;</span><br></pre></td></tr></table></figure></li><li><p>2.3&nbsp;&nbsp;方法2：不适用@Component注解，而是使用java依赖注入规范中的@Named注解为bean设置ID</p></li></ul><h4 id="3-通过为bean添加注解实现自动装配"><a href="#3-通过为bean添加注解实现自动装配" class="headerlink" title="3.通过为bean添加注解实现自动装配"></a>3.通过为bean添加注解实现自动装配</h4><ul><li><p>3.1&nbsp;&nbsp;通过自动装配，将一个CompactDisc注入到CDPlayer之中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ljc.soundsystem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CompactDisc cd;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CDPlayerConfig</span><span class="params">(CompactDisc cd)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cd=cd;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cd.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>3.2&nbsp;&nbsp;构造器上加了@Autowired注解，表明当spring创建CDPlayerConfigbean时，会通过这个构造器来进行实例化并传入一个可以设置给CompactDisc类型的bean。@Autowired不仅适用构造器，也适用其他方法</p></li><li><p>3.3&nbsp;&nbsp;如果没有匹配的bean，spring会抛出一个异常。为了避免异常，可以将@Autowired的required属性设为false：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CDPlayerConfig</span><span class="params">(CompactDisc cd)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cd=cd;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><p>-3.4&nbsp;&nbsp;可以用@Inject替换@Autowired，spring可以同时支持两种</p><hr><h3 id="通过java代码装配bean"><a href="#通过java代码装配bean" class="headerlink" title="通过java代码装配bean"></a>通过java代码装配bean</h3><h4 id="1-创建配置类"><a href="#1-创建配置类" class="headerlink" title="1.创建配置类"></a>1.创建配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ljc.soundsystem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@Configuration注解表明这个类是一个配置类，该类包含在spring应用上下文如何创建bean的细节</li></ul><h4 id="2-声明简单的bean"><a href="#2-声明简单的bean" class="headerlink" title="2.声明简单的bean"></a>2.声明简单的bean</h4><p>-2.1&nbsp;在javaConfig中声明bean，需要编写一个方法，这个方法负责创建所需类型的实例，然后给这个方法添加@Bean注解。例如，下面的代码声明了CompactDisc bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> CompactDisc <span class="title">sgtPeppers</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> SgtPeppers();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>-2.2&nbsp;@Bean注解会告诉spring这个方法会返回一个对象，该对象要注册为spring上下文中的bean。默认下，bean的ID与带有@Bean注解的方法一样，本例中，bean的ID为sgtPeppers。</p><h4 id="3-借助javaConfig实现注入"><a href="#3-借助javaConfig实现注入" class="headerlink" title="3.借助javaConfig实现注入"></a>3.借助javaConfig实现注入</h4><hr><h3 id="通过XML装配bean"><a href="#通过XML装配bean" class="headerlink" title="通过XML装配bean"></a>通过XML装配bean</h3><h4 id="1-创建XML配置规范"><a href="#1-创建XML配置规范" class="headerlink" title="1.创建XML配置规范"></a>1.创建XML配置规范</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!--    configuration details go here--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>以bean元素为根，需要在顶部声明多个XML模式（XSD）文件，这些文件定义了配置spring的XML元素</li></ul><hr><h4 id="2-声明一个简单的bean"><a href="#2-声明一个简单的bean" class="headerlink" title="2.声明一个简单的bean"></a>2.声明一个简单的bean</h4><ul><li>2.1&nbsp;bean元素相当于JavaConfig的@Bean注解，可以按照如下方法声明一个bean：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.ljc.soundsystem.SgtPeppers"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>-因为没有给定ID，所以这个bean会根据类名来进行命名。在本例中，bean的ID将会是“soundsystem.SgtPeppers#0”.其中#0是一个计数的形式，用来区分相同类型的bean。如果声明了另外一个SgtPeppers，并且没有明确的标识，那么它会自动得到ID：“soundsystem.SgtPeppers#1”</p><ul><li><p>2.2更好的方法是借助id属性，为每一个bean设置成自己选择的ID：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span>  <span class="attr">id</span>=<span class="string">"CompactDisc"</span> <span class="attr">class</span>=<span class="string">"com.ljc.soundsystem.SgtPeppers"</span>/&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="3-借助构造器初始化注入bean"><a href="#3-借助构造器初始化注入bean" class="headerlink" title="3.借助构造器初始化注入bean"></a>3.借助构造器初始化注入bean</h4><ul><li><p>构造器注入，有两种基本的配置方案：a.constructor-arg元素&nbsp;&nbsp;b.使用spring3.0引入的c-命名空间</p></li><li><p>3.1已经声明了SgtPeppers bean，并且SgtPeppers类实现了CompactDisc接口，所以我们已经有了一个可以注入到CDPlayer bean的bean。只需要在XML中声明CDPlayer并通过ID引用SgtPeppers：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cdPlayer"</span> <span class="attr">class</span>=<span class="string">"com.ljc.soundsystem.CDPlayerConfig"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"CompactDisc"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>&nbsp;&nbsp;当spring遇到这个bean元素时，它会创建一个CDPlayer实例。constructor-arg会告诉spring要将一个ID为CompactDisc的bean引用传递到CDPlayer的构造器中</p><ul><li><p>3.2 也可以使用费c-命名空间，必须在XML的顶部声明：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:c</span>=<span class="string">"http://www.springframework.org/schema/c"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>声明如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cdPlayer"</span> <span class="attr">class</span>=<span class="string">"com.ljc.soundsystem.CDPlayerConfig"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">c:cd-ref</span>=<span class="string">"CompactDisc"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="4-设置属性"><a href="#4-设置属性" class="headerlink" title="4.设置属性"></a>4.设置属性</h4><ul><li>4.1  CDPlayer如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ljc.soundsystem;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayer</span> <span class="keyword">implements</span> <span class="title">MediaPlayer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CompactDisc compactDisc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCompactDisc</span><span class="params">(CompactDisc compactDisc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.compactDisc=compactDisc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;</span><br><span class="line">        compactDisc.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;对强依赖使用构造器注入，对可选性的以来使用属性注入。将其声明为spring bean：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cdPlayer"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">"com.ljc.soundsystem.CDPlayer"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"compactDisc"</span> <span class="attr">ref</span>=<span class="string">"CompactDisc"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;property元素为属性的Setter方法提供的功能与constructor-arg元素为构造器提供的功能是一样的。在本例中，它引用了ID为compactDisc的bean（通过ref属性），并将其注入到compactDisc属性中（通过setCompactDisc（）方法）</p><ul><li><p>4.2 上文说过，spring为constructor-arg元素提供了c-命名空间，同样，spring提供了更加简洁的p-命名空间作为property的代替方案。为了启用p-命名空间，必须要在XML的顶部声明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:p=<span class="string">"http://www.springframework.org/schema/p"</span></span><br></pre></td></tr></table></figure><ul><li>可以使用p-命名空间，按照如下的方式装配compactDisc属性：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"cdPlayer"</span></span><br><span class="line">           <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.ljc.soundsystem.CDPlayer"</span></span><br><span class="line">           p:compactDisc-ref=<span class="string">"CompactDisc"</span>/&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>建议尽可能使用自动化配置，以避免显示配置所带来的维护成本。但是，当我们确实需要显示配置的话，应该优先选择基于java的配置，它比基于XML的配置更加强大，类型安全并且易于重构。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=1162677372,203309198&amp;fm=26&amp;gp=0.jpg&quot; alt=&quot;spring&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="spring" scheme="http://codelin.com/categories/spring/"/>
    
    
      <category term="spring" scheme="http://codelin.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>java学习路线</title>
    <link href="http://codelin.com/2019/08/11/java%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    <id>http://codelin.com/2019/08/11/java学习路线/</id>
    <published>2019-08-11T07:44:43.000Z</published>
    <updated>2019-08-12T11:43:10.444Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=2714742067,1037030265&fm=26&gp=0.jpg" alt="java学习路线"></p><a id="more"></a><h1 id="java的学习路线"><a href="#java的学习路线" class="headerlink" title="java的学习路线"></a>java的学习路线</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ul><li>编程语言：java</li><li>基本算法</li><li>基本网络知识：TCP/IP HTTP/HTTPs</li><li>基本的设计模式</li></ul><hr><h2 id="工具方面"><a href="#工具方面" class="headerlink" title="工具方面"></a>工具方面</h2><ul><li>操作系统：Linux</li><li>代码管理：SVN/git</li><li>持续集成（CI/CD）：jenkins</li><li>java项目管理工具：maven</li></ul><hr><h2 id="框架方面"><a href="#框架方面" class="headerlink" title="框架方面"></a>框架方面</h2><h4 id="应用层框架"><a href="#应用层框架" class="headerlink" title="应用层框架"></a>应用层框架</h4><ul><li>ssh：spring+structs+hibernate</li><li>ssm：spring+springMVC+mybatis</li><li>springboot</li></ul><h4 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h4><ul><li>MQ 消息队列</li><li>RPC 通信框架</li><li>elasticserach 搜索引擎</li></ul><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><ul><li>SQL：MYSQL/oracle</li><li>NOSQL： Redis mongodb</li></ul><hr><h2 id="架构方面"><a href="#架构方面" class="headerlink" title="架构方面"></a>架构方面</h2><h4 id="分布式-微服务"><a href="#分布式-微服务" class="headerlink" title="分布式/微服务"></a>分布式/微服务</h4><ul><li>springcloud</li><li>dubbo</li></ul><h4 id="虚拟化-容器化技术"><a href="#虚拟化-容器化技术" class="headerlink" title="虚拟化/容器化技术"></a>虚拟化/容器化技术</h4><ul><li>Docker 容器</li><li>K8S kubernetes</li></ul><hr><h2 id="关注源码-性能"><a href="#关注源码-性能" class="headerlink" title="关注源码/性能"></a>关注源码/性能</h2><ul><li>JDK 源码以及设计思想</li><li>spring 源码</li><li>JVM 细节</li><li>高并发/高可用</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=2714742067,1037030265&amp;fm=26&amp;gp=0.jpg&quot; alt=&quot;java学习路线&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://codelin.com/categories/java/"/>
    
    
      <category term="java" scheme="http://codelin.com/tags/java/"/>
    
  </entry>
  
</feed>
