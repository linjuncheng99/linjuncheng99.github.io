<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CodeLin</title>
  
  <subtitle>记录成长</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://codelin.com/"/>
  <updated>2019-08-15T04:31:42.603Z</updated>
  <id>http://codelin.com/</id>
  
  <author>
    <name>lin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面向切面的spring</title>
    <link href="http://codelin.com/2019/08/15/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%9A%84spring/"/>
    <id>http://codelin.com/2019/08/15/面向切面的spring/</id>
    <published>2019-08-15T04:31:42.000Z</published>
    <updated>2019-08-15T04:31:42.603Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>网络爬虫--基于java</title>
    <link href="http://codelin.com/2019/08/13/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB-%E5%9F%BA%E4%BA%8Ejava/"/>
    <id>http://codelin.com/2019/08/13/网络爬虫-基于java/</id>
    <published>2019-08-13T13:17:59.000Z</published>
    <updated>2019-08-14T05:51:47.364Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1565712985941&di=3fdb3a5e07be113b326d9d0c12e90585&imgtype=0&src=http%3A%2F%2Fwx2.sinaimg.cn%2Flarge%2Fc5131475ly1fsjtexv0cyj20gj09a40f.jpg" alt="爬虫"></p><a id="more"></a><h1 id="网络爬虫介绍"><a href="#网络爬虫介绍" class="headerlink" title="网络爬虫介绍"></a>网络爬虫介绍</h1><h2 id="什么是网络爬虫"><a href="#什么是网络爬虫" class="headerlink" title="什么是网络爬虫"></a>什么是网络爬虫</h2><ul><li><ol><li>网络爬虫（又被称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者），是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。另外一些不常使用的名字还有蚂蚁、自动索引、模拟程序或者蠕虫。</li></ol></li><li><ol start="2"><li>网络爬虫是一个自动提取网页的程序，它为搜索引擎从万维网上下载网页，是搜索引擎的重要组成。传统爬虫从一个或若干初始网页的URL开始，获得初始网页上的URL，在抓取网页的过程中，不断从当前页面上抽取新的URL放入队列,直到满足系统的一定停止条件。聚焦爬虫的工作流程较为复杂，需要根据一定的网页分析算法过滤与主题无关的链接，保留有用的链接并将其放入等待抓取的URL队列。然后，它将根据一定的搜索策略从队列中选择下一步要抓取的网页URL，并重复上述过程，直到达到系统的某一条件时停止。另外，所有被爬虫抓取的网页将会被系统存贮，进行一定的分析、过滤，并建立索引，以便之后的查询和检索；对于聚焦爬虫来说，这一过程所得到的分析结果还可能对以后的抓取过程给出反馈和指导。</li></ol></li></ul><h2 id="入门程序"><a href="#入门程序" class="headerlink" title="入门程序"></a>入门程序</h2><h3 id="1-在pom-xml添加配置文件"><a href="#1-在pom-xml添加配置文件" class="headerlink" title="1.在pom.xml添加配置文件"></a>1.在pom.xml添加配置文件</h3><ul><li>httpClient：<a href="https://mvnrepository.com/search?q=httpclient" target="_blank" rel="noopener">https://mvnrepository.com/search?q=httpclient</a></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>slf4j:<a href="https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12" target="_blank" rel="noopener">https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12</a></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-创建log4j-properties文件："><a href="#2-创建log4j-properties文件：" class="headerlink" title="2.创建log4j.properties文件："></a>2.创建log4j.properties文件：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=DEBUG,A1</span><br><span class="line">log4j.logger.com.ljc=DEBUG</span><br><span class="line"></span><br><span class="line">log4j.appender.A1=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.A1.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.A1.layout.ConversionPattern=%-d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125;[%t] [%c]-[%p] %m%n</span><br></pre></td></tr></table></figure><h3 id="3-代码："><a href="#3-代码：" class="headerlink" title="3.代码："></a>3.代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ljc.crawler.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.util.EntityUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrawlerFirst</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.打开浏览器，创建HttpClient对象</span></span><br><span class="line">        CloseableHttpClient httpClient= HttpClients.createDefault();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.输入网址，发起get请求创建HttpGet对象</span></span><br><span class="line">        HttpGet httpGet=<span class="keyword">new</span> HttpGet(<span class="string">"http://www.baidu.com"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.按回车，发起请求，返回响应，使用HttpClient对象发起请求</span></span><br><span class="line">        CloseableHttpResponse response=httpClient.execute(httpGet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.解析响应，获取数据</span></span><br><span class="line">        <span class="comment">//判断状态码是否为200</span></span><br><span class="line">        <span class="keyword">if</span>(response.getStatusLine().getStatusCode()==<span class="number">200</span>)&#123;</span><br><span class="line">            HttpEntity httpEntity=response.getEntity();</span><br><span class="line">            String content= EntityUtils.toString(httpEntity,<span class="string">"utf8"</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(content);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="HttpClient"><a href="#HttpClient" class="headerlink" title="HttpClient"></a>HttpClient</h2><h3 id="1-Get请求：带参数"><a href="#1-Get请求：带参数" class="headerlink" title="1. Get请求：带参数"></a>1. Get请求：带参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置请求地址是：http://yun.itheima.com/search?keys=java</span></span><br><span class="line">        <span class="comment">//创建URINuilder</span></span><br><span class="line">        URIBuilder uriBuilder=<span class="keyword">new</span> URIBuilder(<span class="string">"http://yun.itheima.com/search?keys=java"</span>);</span><br><span class="line">        <span class="comment">//设置参数</span></span><br><span class="line">        uriBuilder.setParameter(<span class="string">"keys"</span>,<span class="string">"java"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建HttpGet对象，设置URL地址</span></span><br><span class="line">        HttpGet httpGet=<span class="keyword">new</span> HttpGet(uriBuilder.build());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"发起请求的信息："</span>+httpGet);</span><br></pre></td></tr></table></figure><ul><li>如果是无参数的GET请求，则直接使用构造方法<font color="red"> HttpGet(String url) </font>创建HttpGet对象即可；<br>如果是带参数GET请求，则可以先使用<font color="red">URIBuilder(String url) </font>创建对象，再调用<font color="red">addParameter(String param, String value)，或setParameter(String param, String value)</font>来设置请求参数，并调用build()方法构建一个URI对象。只有构造方法HttpGet(URI uri)来创建HttpGet对象。</li></ul><h3 id="2-POST请求：带参数"><a href="#2-POST请求：带参数" class="headerlink" title="2.POST请求：带参数"></a>2.POST请求：带参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建HttpPost对象，设置URL地址</span></span><br><span class="line">       HttpPost httpPost=<span class="keyword">new</span> HttpPost(<span class="string">"http://yun.itheima.com/search"</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//声明List集合：封装表单中的参数</span></span><br><span class="line">       List&lt;NameValuePair&gt; params=<span class="keyword">new</span> ArrayList&lt;NameValuePair&gt;();</span><br><span class="line">       params.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">"keys"</span>,<span class="string">"java"</span>));</span><br><span class="line"></span><br><span class="line">       <span class="comment">//创建表单的Entity对象</span></span><br><span class="line">       UrlEncodedFormEntity formEntity=<span class="keyword">new</span> UrlEncodedFormEntity(params,<span class="string">"utf8"</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//设置表单的Entity实体对象到Post请求中</span></span><br><span class="line">       httpPost.setEntity(formEntity);</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">"发起请求的信息："</span>+httpPost);</span><br></pre></td></tr></table></figure><ul><li><p>如果是无参数的GET请求，则直接使用构造方法<font color="red">HttpPost(String url)</font>创建HttpPost对象即可；<br>如果是带参数POST请求，先构建HttpEntity对象并设置请求参数，然后调用<font color="red">setEntity(HttpEntity entity)</font>创建HttpPost对象</p><h3 id="3-连接池"><a href="#3-连接池" class="headerlink" title="3.连接池"></a>3.连接池</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">package</span> com.ljc.crawler.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.HttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.conn.PoolingHttpClientConnectionManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.util.EntityUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 林军成</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> -13:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpPoolTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建连接池管理器</span></span><br><span class="line">        PoolingHttpClientConnectionManager cm=<span class="keyword">new</span> PoolingHttpClientConnectionManager();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置连接数</span></span><br><span class="line">        cm.setMaxTotal(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置每个主机的最大连接数</span></span><br><span class="line">        cm.setDefaultMaxPerRoute(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用连接池管理器发起请求</span></span><br><span class="line">        doGet(cm);</span><br><span class="line">        doGet(cm);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(PoolingHttpClientConnectionManager cm)</span>  </span>&#123;</span><br><span class="line">        <span class="comment">//不是每次创建新的HttpClient，而是从连接池中获取HttpClient对象</span></span><br><span class="line">        CloseableHttpClient httpClient= HttpClients.custom().setConnectionManager(cm).build();</span><br><span class="line"></span><br><span class="line">        HttpGet httpGet=<span class="keyword">new</span> HttpGet(<span class="string">"http://www.csdn.net"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用HttpClient发起请求，获取response</span></span><br><span class="line">        CloseableHttpResponse response=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response = httpClient.execute(httpGet);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//解析响应</span></span><br><span class="line">            <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="number">200</span>) &#123;</span><br><span class="line">                HttpEntity httpEntity = response.getEntity();</span><br><span class="line">                String content = EntityUtils.toString(httpEntity, <span class="string">"utf8"</span>);</span><br><span class="line"></span><br><span class="line">                System.out.println(content.length());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(response!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="comment">// 关闭response,不能关闭HttpClient</span></span><br><span class="line">                    response.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-请求参数"><a href="#4-请求参数" class="headerlink" title="4.请求参数"></a>4.请求参数</h3><ul><li>有时候因为网络或者目标服务器的原因，请求需要很长的时间才能完成，我们需要自定义相关时间<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置请求信息</span></span><br><span class="line">        RequestConfig config=RequestConfig.custom().setConnectTimeout(<span class="number">1000</span>)    <span class="comment">//创建连接的最长时间，单位是毫秒</span></span><br><span class="line">                   .setConnectionRequestTimeout(<span class="number">500</span>)         <span class="comment">//设置获取连接的最长时间，单位是毫秒</span></span><br><span class="line">                   .setSocketTimeout(<span class="number">10</span>*<span class="number">1000</span>)                <span class="comment">//设置数据传输的最长时间，单位是毫秒</span></span><br><span class="line">                   .build();</span><br><span class="line">        <span class="comment">//给请求设置请求信息</span></span><br><span class="line">        httpGet.setConfig(config);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1565712985941&amp;di=3fdb3a5e07be113b326d9d0c12e90585&amp;imgtype=0&amp;src=http%3A%2F%2Fwx2.sinaimg.cn%2Flarge%2Fc5131475ly1fsjtexv0cyj20gj09a40f.jpg&quot; alt=&quot;爬虫&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://codelin.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="java" scheme="http://codelin.com/tags/java/"/>
    
      <category term="爬虫" scheme="http://codelin.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>spring高级装配</title>
    <link href="http://codelin.com/2019/08/13/spring%E9%AB%98%E7%BA%A7%E8%A3%85%E9%85%8D/"/>
    <id>http://codelin.com/2019/08/13/spring高级装配/</id>
    <published>2019-08-13T05:40:27.000Z</published>
    <updated>2019-08-13T08:52:56.094Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://images2018.cnblogs.com/blog/622489/201805/622489-20180519092514495-1501179669.png" alt="spring"></p><a id="more"></a><h1 id="spring高级装配"><a href="#spring高级装配" class="headerlink" title="spring高级装配"></a>spring高级装配</h1><hr><h2 id="spring-profile"><a href="#spring-profile" class="headerlink" title="spring profile"></a>spring profile</h2><hr><h3 id="1-配置profile-bean"><a href="#1-配置profile-bean" class="headerlink" title="1.配置profile bean"></a>1.配置profile bean</h3><ul><li>在3.1版本中，spring引入了spring profile的功能。要使用profile，首先要将所有不同的bean定义整理到一个或多个profile中，在将应用部署到每个环境中，要保证对应得profile处于激活（active）状态。</li></ul><h4 id="1-1-java中配置profile"><a href="#1-1-java中配置profile" class="headerlink" title="1.1 java中配置profile"></a>1.1 java中配置profile</h4><ul><li>可以使用@Profile注解指定某一个bean属于哪一个profile。例如，在配置类中，嵌入式数据库的DataSource可能会配置成这样：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ljc.myapp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Profile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Profile</span>(<span class="string">"dev"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DevelopmentProfileConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span>(destroyMethod = <span class="string">"shutdown"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>@Profile应用在类级别上，它会告诉spring这个配置类的bean只有在dev profile激活时才会创建。如果dev profile没有激活的话，那么带有@Bean注解的方法都会被忽略掉。</p><ul><li>在spring3.1中，只能在类级别上使用@Profile注解，不过，从spring3.2开始，也可以在方法级别使用@Profile注解，与@bean一同使用。这样就能将这个bean的声明放到同一个配置类中。</li></ul><h4 id="1-2-在XML中配置profile"><a href="#1-2-在XML中配置profile" class="headerlink" title="1.2 在XML中配置profile"></a>1.2 在XML中配置profile</h4><ul><li>可以使用bean元素的profile属性，在XML中配置profile bean。例如，在XML中定义适用于开发阶段的嵌入式数据库DataSource bean，可以创建如下的XML文件：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:jdbc</span>=<span class="string">"http://www.springframework.org/schema/jdbc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/jdbc </span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/jdbc/spring-jdbc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">profile</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">jdbc:embedded-database</span> <span class="attr">id</span>=<span class="string">"dataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbc:script</span> <span class="attr">location</span>=<span class="string">"classpath:schema.sql"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbc:script</span> <span class="attr">location</span>=<span class="string">"classpath:test-data.sql"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">jdbc:embedded-database</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-激活profile"><a href="#2-激活profile" class="headerlink" title="2.激活profile"></a>2.激活profile</h3><ul><li>spring在确定哪个profile处于激活状态时，需要依赖两个独立的属性：spring。profile。active和spring。profile。default。如果设置了spring。profile。active的值，它的值就会用来确定哪个profile是激活的。但如果没有设置spring。profile。active属性的话，那么spring就会查找spring。profile。default的值，如果都没有设置的话，那就没有激活的profile，那就只能创建那些没有定义在profile的bean。</li></ul><hr><h2 id="条件化的bean"><a href="#条件化的bean" class="headerlink" title="条件化的bean"></a>条件化的bean</h2><ul><li>如果希望一个或者多个bean只有在应用的类路径下包含特定的库时才创建。或者希望某个bean只有在当另外的特定的bean也声明了之后才会创建，还可能要求某个环境变量设置之后，才会创建某个bean。在spring4之前很难实现这种操作，但是spring4引入了一个新的注解@Conditionnl，它可以用到带有@Bean注解的方法上，弱国给定的结果为true，就会创建这个bean，否则的话，这个bean会被忽略。</li></ul><h3 id="1-条件化的配置bean"><a href="#1-条件化的配置bean" class="headerlink" title="1.条件化的配置bean"></a>1.条件化的配置bean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Conditional</span>(MagicExistsCondition.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> MagicBean <span class="title">magicBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MagicBean();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，@Conditional给定了条件–MagicExistsCondition。@Conditional将会通过Condition接口进行条件对比;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">matchs</span><span class="params">(ConditionContext ctxt, AnnotatedTypeMetadata metadata)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>如果 matchs（）方法返回true，那么就会创建带有@Conditional注解的bean，如果返回false，则不会创建这些bean</p><h3 id="2-检查是否存在某属性"><a href="#2-检查是否存在某属性" class="headerlink" title="2.检查是否存在某属性"></a>2.检查是否存在某属性</h3><ul><li>在本例中，我们需要创建Condition的实现，并根据环境中是否存在magic属性来做决策：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ljc.myapp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Condition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ConditionContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotatedTypeMetadata;</span><br><span class="line"><span class="keyword">import</span> sun.tools.java.Environment;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MagicExistsCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata)</span> </span>&#123;</span><br><span class="line">        Environment env=context.getEnvirment;</span><br><span class="line">        <span class="keyword">return</span> env.containsProperty(<span class="string">"magic"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>matchs()方法很简单但功能强大，它通过给定的ConditionContext对象得到Environment对象，并用这个对象检查环境是否存在magic属性，属性的值是什么无所谓，只要满足条件就可以，满足就返回true，否则返回false</p><ul><li><p>ConditionContext接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ConditionContext</span> </span>&#123;</span><br><span class="line">    <span class="function">BeanDefinitionRegistry <span class="title">getRegistry</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">ConfigurableListableBeanFactory <span class="title">getBeanFactory</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Environment <span class="title">getEnvironment</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ResourceLoader <span class="title">getResourceLoader</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">ClassLoader <span class="title">getClassLoader</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过ConditionContext接口，可以做到如下几点：</p></li><li><ol><li>借助getRegistry()返回的BeanDefinitionRegistry检查bean定义</li></ol></li><li><ol start="2"><li>借助getBeanFactory()返回的ConfigurableListableBeanFactory 检查bean是否存在，甚至探查bean的属性</li></ol></li><li><ol start="3"><li>借助getEnvironment()返回的Environment检查环境变量是否存在以及它的值是什么</li></ol></li><li><ol start="4"><li>读取并探查getResourceLoader()返回的ResourceLoader所加载的资源</li></ol></li><li><ol start="5"><li>借助getClassLoader()返回的ClassLoader加载并检查类是否存在</li></ol></li><li><p>AnnotatedTypeMetadata接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AnnotatedTypeMetadata</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isAnnotated</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">Map&lt;String, Object&gt; <span class="title">getAnnotationAttributes</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">Map&lt;String, Object&gt; <span class="title">getAnnotationAttributes</span><span class="params">(String var1, <span class="keyword">boolean</span> var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">MultiValueMap&lt;String, Object&gt; <span class="title">getAllAnnotationAttributes</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">MultiValueMap&lt;String, Object&gt; <span class="title">getAllAnnotationAttributes</span><span class="params">(String var1, <span class="keyword">boolean</span> var2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>借助isAnnotated方法，能够判断带有@Bean注解的方法是不是还有其他特定的注解。借助其他方法，能够检查@Bean注解的方法上其他的注解的属性</p><hr><h2 id="处理自动装配的歧义性"><a href="#处理自动装配的歧义性" class="headerlink" title="处理自动装配的歧义性"></a>处理自动装配的歧义性</h2><ul><li>当发生歧义性时，spring提供了多种可选的方案来解决这样的问题。可以将某个bean设为首选（primary）的bean，或者使用限定符（qualifier）来帮助spring将可选的范围缩小到只有一个。</li></ul><h3 id="1-标示首选的bean"><a href="#1-标示首选的bean" class="headerlink" title="1.标示首选的bean"></a>1.标示首选的bean</h3><ul><li><p>下面的代码显示了如何将@Component注解的bean声明为首选的bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>()</span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SgtPeppers</span> <span class="keyword">implements</span> <span class="title">CompactDisc</span> </span>&#123;</span><br></pre></td></tr></table></figure></li><li><p>通过java代码显示的声明，那么@Bean的方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="meta">@Conditional</span>(MagicExistsCondition.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> MagicBean <span class="title">magicBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MagicBean();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果使用XML配置的话，bean元素有一个primary属性用来指定首选的bean：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span>  <span class="attr">id</span>=<span class="string">"CompactDisc"</span> </span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">"com.ljc.soundsystem.SgtPeppers"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">primary</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-限定自动装配的bean"><a href="#2-限定自动装配的bean" class="headerlink" title="2.限定自动装配的bean"></a>2.限定自动装配的bean</h3><ul><li>确保将CompactDisc注入到setCompactDisc中：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"CompactDisc"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCompactDisc</span><span class="params">(CompactDisc compactDisc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.compactDisc=compactDisc;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="bean的作用域"><a href="#bean的作用域" class="headerlink" title="bean的作用域"></a>bean的作用域</h2><ul><li><p>在默认情况下，spring应用上下文中的所有bean都是作为以单例（singleton）模式创建的，也就是说，不管给定的一个bean被注入到其他bean多少次，每次所注入的都是同一个实例。spring定义了多种作用域，可以基于这些作用域创建bean，包括：</p><ol><li>单例（singleton）：在整个应用中，只创建bean一个实例；</li><li>原型（propotype）：每次注入或者通过spring应用上下文获取的时候，都会创建一个新的bean实例；</li><li>会话（session）：在Web应用中，为每个会话创建一个bean；</li><li>请求（Rquest）：在web应用中，为每个请求创建一个bean；</li></ol><ul><li>单例是默认的，如果选择其他的作用域，要使用@Scope注解，可以和@Bean或@Component注解一起使用</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/622489/201805/622489-20180519092514495-1501179669.png&quot; alt=&quot;spring&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="spring" scheme="http://codelin.com/categories/spring/"/>
    
    
      <category term="spring" scheme="http://codelin.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring的核心---spring容器</title>
    <link href="http://codelin.com/2019/08/12/Spring%E7%9A%84%E6%A0%B8%E5%BF%83/"/>
    <id>http://codelin.com/2019/08/12/Spring的核心/</id>
    <published>2019-08-12T08:24:26.000Z</published>
    <updated>2019-08-13T05:21:49.297Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=1162677372,203309198&fm=26&gp=0.jpg" alt="spring"></p><a id="more"></a><h1 id="spring的核心—spring容器"><a href="#spring的核心—spring容器" class="headerlink" title="spring的核心—spring容器"></a>spring的核心—spring容器</h1><h2 id="spring基本概念"><a href="#spring基本概念" class="headerlink" title="spring基本概念"></a>spring基本概念</h2><hr><h4 id="什么是spring框架"><a href="#什么是spring框架" class="headerlink" title="什么是spring框架"></a>什么是spring框架</h4><ul><li>Spring是一个开源框架，Spring是于2003 年兴起的一个轻量级的Java 开发框架，由Rod Johnson 在其著作Expert One-On-One J2EE Development and Design中阐述的部分理念和原型衍生而来。它是为了解决企业应用开发的复杂性而创建的。框架的主要优势之一就是其分层架构，分层架构允许使用者选择使用哪一个组件，同时为 J2EE 应用程序开发提供集成的框架。Spring使用基本的JavaBean来完成以前只可能由EJB完成的事情。然而，Spring的用途不仅限于服务器端的开发。从简单性、可测试性和松耦合的角度而言，任何Java应用都可以从Spring中受益。<font color="red">Spring的核心是控制反转（IoC）和面向切面（AOP）。</font><br>简单来说，Spring是一个分层的JavaSE/EE full-stack(一站式) 轻量级开源框架。</li></ul><hr><h4 id="spring的体系结构"><a href="#spring的体系结构" class="headerlink" title="spring的体系结构"></a>spring的体系结构</h4><ul><li><p>spring框架是一个分层架构，包含一系列的功能要素，被分为大约20个模块。这些模块分为<font color="green">Core Container，Data Access/Integration,Web,AOP,测试部分</font></p></li><li><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1565609755325&di=76f600939d873acb28d6105503c508d7&imgtype=0&src=http%3A%2F%2Fimg.mp.itc.cn%2Fupload%2F20170126%2Fd4968fc8035d465a9ccf69a79ce4d022_th.jpeg" alt="spring体系结构"></p></li></ul><hr><ul><li>让我们逐一浏览spring模块</li></ul><h5 id="spring核心容器—管理着bean的创建，配置和管理"><a href="#spring核心容器—管理着bean的创建，配置和管理" class="headerlink" title="spring核心容器—管理着bean的创建，配置和管理"></a>spring核心容器—管理着bean的创建，配置和管理</h5><ul><li><p>bean 工厂：为spring提供DI的功能</p></li><li><p>应用上下文：提供了配置spring的方式</p></li></ul><h5 id="spring的AOP模块—面向切面编程"><a href="#spring的AOP模块—面向切面编程" class="headerlink" title="spring的AOP模块—面向切面编程"></a>spring的AOP模块—面向切面编程</h5><ul><li>AOP：帮助应用对象解耦</li></ul><h5 id="数据访问与集成"><a href="#数据访问与集成" class="headerlink" title="数据访问与集成"></a>数据访问与集成</h5><ul><li><p>JDBC：抽象了板式代码，使数据库代码变得简洁明了</p></li><li><p>ORM：对许多流行的ORM框架进行了集成，例如Hibernate。spring的事务管理支持所有的ORM框架以及JDBC</p></li><li><p>JMS：使用消息以异步的方式与其他应用集成，从spring3.0开始，本模块还包含对象到XML映射的特性</p></li></ul><h5 id="Web与远程调用—MVC（Model-View-Controller）"><a href="#Web与远程调用—MVC（Model-View-Controller）" class="headerlink" title="Web与远程调用—MVC（Model-View-Controller）"></a>Web与远程调用—MVC（Model-View-Controller）</h5><h5 id="Instrumentation"><a href="#Instrumentation" class="headerlink" title="Instrumentation"></a>Instrumentation</h5><ul><li>提供了为JVM添加代理的功能。具体来讲，为Tomcat提供了一个植入代理，能够为Tomcat传递类文件，就像这些文件是被类加载器加载的一样</li></ul><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><ul><li>为使用JNDI，Servlet和Portlet编写单元提供了一些列的mock对象实现</li></ul><hr><h2 id="装配Bean"><a href="#装配Bean" class="headerlink" title="装配Bean"></a>装配Bean</h2><ul><li>在XML中进行显示配置</li><li>在java中进行显示配置</li><li>隐式的bean发现机制和自动装配</li></ul><hr><h3 id="自动化装配bean：组件扫描和自动装配"><a href="#自动化装配bean：组件扫描和自动装配" class="headerlink" title="自动化装配bean：组件扫描和自动装配"></a>自动化装配bean：组件扫描和自动装配</h3><h4 id="1-创建可被发现的bean"><a href="#1-创建可被发现的bean" class="headerlink" title="1.创建可被发现的bean"></a>1.创建可被发现的bean</h4><ul><li><p>1.1 CompactDisc接口定义了CD的概念</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ljc.soundsystem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CompactDisc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>1.2 带有@Component注解的CompactDisc实现类SgtPeppers</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ljc.soundsystem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SgtPeppers</span> <span class="keyword">implements</span> <span class="title">CompactDisc</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title=<span class="string">"Sgt.Pepeers's Lonely Hearts Club Band"</span>;</span><br><span class="line">    <span class="keyword">private</span> String artist=<span class="string">"The Beatles"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Playing"</span>+title+<span class="string">"by"</span>+artist);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@Compoment注解：表明该类会作为组件类，并告知spring要为这个类创建bean</p></li><li><p>1.3  @ComponentScan注解启用了组件扫描—组件扫描默认是不开启的，需要显示配置一下spring，从而命令它去寻找带有@Component注解的类，并为其创建bean</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ljc.soundsystem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="2-为组件扫描的bean命名"><a href="#2-为组件扫描的bean命名" class="headerlink" title="2. 为组件扫描的bean命名"></a>2. 为组件扫描的bean命名</h4><ul><li><p>2.1&nbsp;&nbsp;spring给所有的bean都有一个ID。在前面的例子中，我们没有为SgtPeppersbean设置ID，但spring会根据类名为其指定一个ID，为sgtPeppers，也就是类名的第一个字母变为小写</p></li><li><p>2.2&nbsp;&nbsp;方法1：将期望的ID值传递给@Component注解。例如想让这个标识为lin，只需要像下面配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"lin"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SgtPeppers</span> <span class="keyword">implements</span> <span class="title">CompactDisc</span> </span>&#123;</span><br><span class="line">    ...&#125;</span><br></pre></td></tr></table></figure></li><li><p>2.3&nbsp;&nbsp;方法2：不适用@Component注解，而是使用java依赖注入规范中的@Named注解为bean设置ID</p></li></ul><h4 id="3-通过为bean添加注解实现自动装配"><a href="#3-通过为bean添加注解实现自动装配" class="headerlink" title="3.通过为bean添加注解实现自动装配"></a>3.通过为bean添加注解实现自动装配</h4><ul><li><p>3.1&nbsp;&nbsp;通过自动装配，将一个CompactDisc注入到CDPlayer之中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ljc.soundsystem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CompactDisc cd;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CDPlayerConfig</span><span class="params">(CompactDisc cd)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cd=cd;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cd.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>3.2&nbsp;&nbsp;构造器上加了@Autowired注解，表明当spring创建CDPlayerConfigbean时，会通过这个构造器来进行实例化并传入一个可以设置给CompactDisc类型的bean。@Autowired不仅适用构造器，也适用其他方法</p></li><li><p>3.3&nbsp;&nbsp;如果没有匹配的bean，spring会抛出一个异常。为了避免异常，可以将@Autowired的required属性设为false：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CDPlayerConfig</span><span class="params">(CompactDisc cd)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cd=cd;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><p>-3.4&nbsp;&nbsp;可以用@Inject替换@Autowired，spring可以同时支持两种</p><hr><h3 id="通过java代码装配bean"><a href="#通过java代码装配bean" class="headerlink" title="通过java代码装配bean"></a>通过java代码装配bean</h3><h4 id="1-创建配置类"><a href="#1-创建配置类" class="headerlink" title="1.创建配置类"></a>1.创建配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ljc.soundsystem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@Configuration注解表明这个类是一个配置类，该类包含在spring应用上下文如何创建bean的细节</li></ul><h4 id="2-声明简单的bean"><a href="#2-声明简单的bean" class="headerlink" title="2.声明简单的bean"></a>2.声明简单的bean</h4><p>-2.1&nbsp;在javaConfig中声明bean，需要编写一个方法，这个方法负责创建所需类型的实例，然后给这个方法添加@Bean注解。例如，下面的代码声明了CompactDisc bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> CompactDisc <span class="title">sgtPeppers</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> SgtPeppers();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>-2.2&nbsp;@Bean注解会告诉spring这个方法会返回一个对象，该对象要注册为spring上下文中的bean。默认下，bean的ID与带有@Bean注解的方法一样，本例中，bean的ID为sgtPeppers。</p><h4 id="3-借助javaConfig实现注入"><a href="#3-借助javaConfig实现注入" class="headerlink" title="3.借助javaConfig实现注入"></a>3.借助javaConfig实现注入</h4><hr><h3 id="通过XML装配bean"><a href="#通过XML装配bean" class="headerlink" title="通过XML装配bean"></a>通过XML装配bean</h3><h4 id="1-创建XML配置规范"><a href="#1-创建XML配置规范" class="headerlink" title="1.创建XML配置规范"></a>1.创建XML配置规范</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!--    configuration details go here--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>以bean元素为根，需要在顶部声明多个XML模式（XSD）文件，这些文件定义了配置spring的XML元素</li></ul><hr><h4 id="2-声明一个简单的bean"><a href="#2-声明一个简单的bean" class="headerlink" title="2.声明一个简单的bean"></a>2.声明一个简单的bean</h4><ul><li>2.1&nbsp;bean元素相当于JavaConfig的@Bean注解，可以按照如下方法声明一个bean：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.ljc.soundsystem.SgtPeppers"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>-因为没有给定ID，所以这个bean会根据类名来进行命名。在本例中，bean的ID将会是“soundsystem.SgtPeppers#0”.其中#0是一个计数的形式，用来区分相同类型的bean。如果声明了另外一个SgtPeppers，并且没有明确的标识，那么它会自动得到ID：“soundsystem.SgtPeppers#1”</p><ul><li><p>2.2更好的方法是借助id属性，为每一个bean设置成自己选择的ID：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span>  <span class="attr">id</span>=<span class="string">"CompactDisc"</span> <span class="attr">class</span>=<span class="string">"com.ljc.soundsystem.SgtPeppers"</span>/&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="3-借助构造器初始化注入bean"><a href="#3-借助构造器初始化注入bean" class="headerlink" title="3.借助构造器初始化注入bean"></a>3.借助构造器初始化注入bean</h4><ul><li><p>构造器注入，有两种基本的配置方案：a.constructor-arg元素&nbsp;&nbsp;b.使用spring3.0引入的c-命名空间</p></li><li><p>3.1已经声明了SgtPeppers bean，并且SgtPeppers类实现了CompactDisc接口，所以我们已经有了一个可以注入到CDPlayer bean的bean。只需要在XML中声明CDPlayer并通过ID引用SgtPeppers：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cdPlayer"</span> <span class="attr">class</span>=<span class="string">"com.ljc.soundsystem.CDPlayerConfig"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"CompactDisc"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>&nbsp;&nbsp;当spring遇到这个bean元素时，它会创建一个CDPlayer实例。constructor-arg会告诉spring要将一个ID为CompactDisc的bean引用传递到CDPlayer的构造器中</p><ul><li><p>3.2 也可以使用费c-命名空间，必须在XML的顶部声明：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:c</span>=<span class="string">"http://www.springframework.org/schema/c"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>声明如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cdPlayer"</span> <span class="attr">class</span>=<span class="string">"com.ljc.soundsystem.CDPlayerConfig"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">c:cd-ref</span>=<span class="string">"CompactDisc"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="4-设置属性"><a href="#4-设置属性" class="headerlink" title="4.设置属性"></a>4.设置属性</h4><ul><li>4.1  CDPlayer如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ljc.soundsystem;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayer</span> <span class="keyword">implements</span> <span class="title">MediaPlayer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CompactDisc compactDisc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCompactDisc</span><span class="params">(CompactDisc compactDisc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.compactDisc=compactDisc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;</span><br><span class="line">        compactDisc.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;对强依赖使用构造器注入，对可选性的以来使用属性注入。将其声明为spring bean：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cdPlayer"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">"com.ljc.soundsystem.CDPlayer"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"compactDisc"</span> <span class="attr">ref</span>=<span class="string">"CompactDisc"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;property元素为属性的Setter方法提供的功能与constructor-arg元素为构造器提供的功能是一样的。在本例中，它引用了ID为compactDisc的bean（通过ref属性），并将其注入到compactDisc属性中（通过setCompactDisc（）方法）</p><ul><li><p>4.2 上文说过，spring为constructor-arg元素提供了c-命名空间，同样，spring提供了更加简洁的p-命名空间作为property的代替方案。为了启用p-命名空间，必须要在XML的顶部声明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:p=<span class="string">"http://www.springframework.org/schema/p"</span></span><br></pre></td></tr></table></figure><ul><li>可以使用p-命名空间，按照如下的方式装配compactDisc属性：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"cdPlayer"</span></span><br><span class="line">           <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.ljc.soundsystem.CDPlayer"</span></span><br><span class="line">           p:compactDisc-ref=<span class="string">"CompactDisc"</span>/&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>建议尽可能使用自动化配置，以避免显示配置所带来的维护成本。但是，当我们确实需要显示配置的话，应该优先选择基于java的配置，它比基于XML的配置更加强大，类型安全并且易于重构。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=1162677372,203309198&amp;fm=26&amp;gp=0.jpg&quot; alt=&quot;spring&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="spring" scheme="http://codelin.com/categories/spring/"/>
    
    
      <category term="spring" scheme="http://codelin.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>java学习路线</title>
    <link href="http://codelin.com/2019/08/11/java%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    <id>http://codelin.com/2019/08/11/java学习路线/</id>
    <published>2019-08-11T07:44:43.000Z</published>
    <updated>2019-08-12T11:43:10.444Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=2714742067,1037030265&fm=26&gp=0.jpg" alt="java学习路线"></p><a id="more"></a><h1 id="java的学习路线"><a href="#java的学习路线" class="headerlink" title="java的学习路线"></a>java的学习路线</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ul><li>编程语言：java</li><li>基本算法</li><li>基本网络知识：TCP/IP HTTP/HTTPs</li><li>基本的设计模式</li></ul><hr><h2 id="工具方面"><a href="#工具方面" class="headerlink" title="工具方面"></a>工具方面</h2><ul><li>操作系统：Linux</li><li>代码管理：SVN/git</li><li>持续集成（CI/CD）：jenkins</li><li>java项目管理工具：maven</li></ul><hr><h2 id="框架方面"><a href="#框架方面" class="headerlink" title="框架方面"></a>框架方面</h2><h4 id="应用层框架"><a href="#应用层框架" class="headerlink" title="应用层框架"></a>应用层框架</h4><ul><li>ssh：spring+structs+hibernate</li><li>ssm：spring+springMVC+mybatis</li><li>springboot</li></ul><h4 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h4><ul><li>MQ 消息队列</li><li>RPC 通信框架</li><li>elasticserach 搜索引擎</li></ul><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><ul><li>SQL：MYSQL/oracle</li><li>NOSQL： Redis mongodb</li></ul><hr><h2 id="架构方面"><a href="#架构方面" class="headerlink" title="架构方面"></a>架构方面</h2><h4 id="分布式-微服务"><a href="#分布式-微服务" class="headerlink" title="分布式/微服务"></a>分布式/微服务</h4><ul><li>springcloud</li><li>dubbo</li></ul><h4 id="虚拟化-容器化技术"><a href="#虚拟化-容器化技术" class="headerlink" title="虚拟化/容器化技术"></a>虚拟化/容器化技术</h4><ul><li>Docker 容器</li><li>K8S kubernetes</li></ul><hr><h2 id="关注源码-性能"><a href="#关注源码-性能" class="headerlink" title="关注源码/性能"></a>关注源码/性能</h2><ul><li>JDK 源码以及设计思想</li><li>spring 源码</li><li>JVM 细节</li><li>高并发/高可用</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=2714742067,1037030265&amp;fm=26&amp;gp=0.jpg&quot; alt=&quot;java学习路线&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://codelin.com/categories/java/"/>
    
    
      <category term="java" scheme="http://codelin.com/tags/java/"/>
    
  </entry>
  
</feed>
